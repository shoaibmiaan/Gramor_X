File #1.: pages/teacher/index.tsx
import * as React from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { Container } from '@/components/design-system/Container';
import { useTeacherProfile } from '@/hooks/useTeacherProfile';
import { RegistrationComplete } from '@/components/teacher/RegistrationComplete';

export default function TeacherIndex() {
  const router = useRouter();
  const { profile, isLoading } = useTeacherProfile();

  React.useEffect(() => {
    if (isLoading) return;
    if (!profile || !profile.teacher_onboarding_completed) {
      router.replace('/teacher/register');
    }
  }, [isLoading, profile, router]);

  const showPending =
    !!profile &&
    profile.teacher_onboarding_completed &&
    !profile.teacher_approved;

  return (
    <>
      <Head><title>Teacher</title></Head>
      <Container className="py-8">
        {isLoading ? (
          <div className="text-sm">Loading…</div>
        ) : showPending ? (
          <RegistrationComplete />
        ) : null}
      </Container>
    </>
  );
}
--------------------------------------
File #2.: pages/teacher/register.tsx
import * as React from 'react';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { Container } from '@/components/design-system/Container';
import { useTeacherProfile } from '@/hooks/useTeacherProfile';
import { TeacherOnboardingForm } from '@/components/teacher/TeacherOnboardingForm';

const SUBJECTS = [
  'IELTS Listening',
  'IELTS Reading',
  'IELTS Writing',
  'IELTS Speaking',
  'Grammar',
  'Vocabulary',
];

export default function TeacherRegisterPage() {
  const router = useRouter();
  const { profile, isLoading } = useTeacherProfile();

  React.useEffect(() => {
    if (isLoading) return;
    if (profile?.teacher_onboarding_completed && !profile.teacher_approved) {
      router.replace('/teacher'); // go to pending screen
    }
  }, [isLoading, profile, router]);

  return (
    <>
      <Head><title>Teacher Registration</title></Head>
      <Container className="py-8 space-y-6">
        <h1 className="text-2xl font-semibold">Apply as a Teacher</h1>
        <TeacherOnboardingForm subjectsOptions={SUBJECTS} />
      </Container>
    </>
  );
}
--------------------------------------
File #3.: pages/teacher/cohorts/[id].tsx
// pages/teacher/cohorts/[id].tsx
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { Container } from "@/components/design-system/Container";
import { CohortTable, type CohortRow } from "@/components/teacher/CohortTable";
import { AssignTaskModal } from "@/components/teacher/AssignTaskModal";
import { supabaseBrowser } from "@/lib/supabaseBrowser";

type Cohort = { id: string; name: string; created_at: string };

export default function CohortDetail() {
  const router = useRouter();
  const cohortId = (router.query.id as string) || "";

  const [loading, setLoading] = React.useState(true);
  const [error, setError] = React.useState<string | null>(null);
  const [cohort, setCohort] = React.useState<Cohort | null>(null);
  const [rows, setRows] = React.useState<CohortRow[]>([]);
  const [assignOpen, setAssignOpen] = React.useState(false);

  const refresh = React.useCallback(async () => {
    if (!cohortId) return;
    try {
      setLoading(true);
      setError(null);

      // Load cohort shell (enforced by RLS: must be teacher's cohort)
      const { data: cRow, error: e1 } = await supabaseBrowser
        .from("teacher_cohorts")
        .select("*")
        .eq("id", cohortId)
        .single();

      if (e1 || !cRow) throw new Error(e1?.message || "Cohort not found");
      setCohort(cRow as Cohort);

      // Load members with profile info if available
      const { data: members, error: e2 } = await supabaseBrowser
        .from("teacher_cohort_members")
        .select("id, cohort_id, student_id, joined_at, progress, profiles(full_name, email, avatar_url)")
        .eq("cohort_id", cohortId);

      if (e2) throw new Error(e2.message);

      const normalized: CohortRow[] = (members as any[]).map((m) => {
        const prog = m.progress || {};
        // crude completion: count truthy "done" values
        const completed = Object.values(prog).filter((v: any) => v === "done" || v === true).length;
        const total = Math.max(completed, 14); // assume 14-day track; adjust when real tasks exist
        return {
          id: m.id,
          cohortId: m.cohort_id,
          studentId: m.student_id,
          joinedAt: m.joined_at,
          progress: prog,
          fullName: m.profiles?.full_name ?? "Student",
          email: m.profiles?.email ?? undefined,
          avatarUrl: m.profiles?.avatar_url ?? undefined,
          completed,
          total,
        };
      });

      setRows(normalized);
    } catch (e: any) {
      setError(e.message ?? "Error");
    } finally {
      setLoading(false);
    }
  }, [cohortId]);

  React.useEffect(() => {
    void refresh();
  }, [refresh]);

  const onNudge = async (studentId: string) => {
    const message = `Reminder: Please complete today's challenge task for cohort ${cohort?.name}.`;
    const res = await fetch("/api/notifications/nudge", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ to: studentId, message }),
    });
    if (!res.ok) {
      const j = await res.json().catch(() => ({}));
      alert(j?.error ?? "Failed to send nudge");
    } else {
      alert("Nudge sent!");
    }
  };

  const onRemove = async (membershipId: string) => {
    // RLS delete policy not defined earlier; may fail until policy is added.
    const { error } = await supabaseBrowser
      .from("teacher_cohort_members")
      .delete()
      .eq("id", membershipId);
    if (error) {
      alert(error.message);
    } else {
      setRows((prev) => prev.filter((r) => r.id !== membershipId));
    }
  };

  return (
    <>
      <Head>
        <title>{cohort ? `${cohort.name} · Cohort` : "Cohort"} · GramorX</title>
        <meta name="description" content="Manage cohort members and assignments." />
      </Head>

      <div className="py-6">
        <Container>
          <header className="mb-4 flex items-center justify-between">
            <div>
              <h1 className="text-h2 font-bold text-foreground">
                {cohort?.name || "Cohort"}
              </h1>
              <p className="text-small text-muted-foreground">
                Track member progress and assign tasks.
              </p>
            </div>
            <nav className="flex items-center gap-3">
              <Link
                href="/teacher"
                className="rounded-md border border-border bg-background px-3 py-1.5 text-small text-foreground hover:bg-border/30"
              >
                All Cohorts
              </Link>
              <button
                type="button"
                onClick={() => setAssignOpen(true)}
                className="rounded-md border border-border bg-primary px-3 py-1.5 text-small text-background hover:opacity-90"
              >
                Assign task
              </button>
            </nav>
          </header>

          {loading ? (
            <div className="rounded-xl border border-border bg-card p-4 text-small text-muted-foreground">
              Loading cohort…
            </div>
          ) : error ? (
            <div className="rounded-xl border border-border bg-card p-4 text-small text-red-400">
              {error}
            </div>
          ) : !cohort ? (
            <div className="rounded-xl border border-border bg-card p-4 text-small text-muted-foreground">
              Cohort not found.
            </div>
          ) : (
            <CohortTable rows={rows} onNudge={onNudge} onRemove={onRemove} />
          )}
        </Container>
      </div>

      <AssignTaskModal
        open={assignOpen}
        onClose={() => setAssignOpen(false)}
        cohortId={cohortId}
        onSubmit={async (data) => {
          // Uses API route which expects teacher_assignments table. If missing, backend will return error.
          const res = await fetch("/api/teacher/assignments", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(data),
          });
          if (!res.ok) {
            const j = await res.json().catch(() => ({}));
            alert(j?.error ?? "Failed to assign task");
          } else {
            setAssignOpen(false);
            alert("Task assigned");
          }
        }}
      />
    </>
  );
}
--------------------------------------
File #4.: pages/teacher/onboarding.tsx
'use client';

import * as React from 'react';
import Link from 'next/link';
import { useRouter } from 'next/router';
import { z } from 'zod';
import { Container } from '@/components/design-system/Container';
import { Card } from '@/components/design-system/Card';
import { Input } from '@/components/design-system/Input';
import { Textarea } from '@/components/design-system/Textarea';
import { Select } from '@/components/design-system/Select';
import { Checkbox } from '@/components/design-system/Checkbox';
import { Button } from '@/components/design-system/Button';
import { Alert } from '@/components/design-system/Alert';
import { Badge } from '@/components/design-system/Badge';
import OnboardingProgress from '@/components/teacher/OnboardingProgress';
import DocumentUploadStub from '@/components/teacher/DocumentUploadStub';

const FormSchema = z.object({
  fullName: z.string().min(3),
  email: z.string().email(),
  phone: z.string().min(8),
  country: z.string().min(2),
  city: z.string().min(2),
  subjects: z.array(z.string()).min(1),
  experienceYears: z.number().min(0).max(50),
  bio: z.string().min(50),
  languages: z.array(z.string()).min(1),
  availability: z.array(z.string()).min(1), // slots or days
  hourlyRate: z.number().min(0),
  linkedin: z.string().url().optional().or(z.literal('')),
  portfolio: z.string().url().optional().or(z.literal('')),
  agree: z.boolean().refine((v) => v, 'Consent required'),
  // documents handled by stub (frontend-only)
});

export default function TeacherOnboarding() {
  const router = useRouter();
  const [err, setErr] = React.useState<string | null>(null);
  const [ok, setOk] = React.useState(false);
  const [loading, setLoading] = React.useState(false);

  // Local state (frontend-only)
  const [subjects, setSubjects] = React.useState<string[]>([]);
  const [languages, setLanguages] = React.useState<string[]>([]);
  const [availability, setAvailability] = React.useState<string[]>([]);
  const [docCount, setDocCount] = React.useState(0);

  const handleSubmit: React.FormEventHandler<HTMLFormElement> = async (e) => {
    e.preventDefault();
    setErr(null);
    setLoading(true);

    const form = new FormData(e.currentTarget);
    const payload = {
      fullName: String(form.get('fullName') ?? ''),
      email: String(form.get('email') ?? ''),
      phone: String(form.get('phone') ?? ''),
      country: String(form.get('country') ?? ''),
      city: String(form.get('city') ?? ''),
      subjects,
      experienceYears: Number(form.get('experienceYears') ?? '0'),
      bio: String(form.get('bio') ?? ''),
      languages,
      availability,
      hourlyRate: Number(form.get('hourlyRate') ?? '0'),
      linkedin: String(form.get('linkedin') ?? ''),
      portfolio: String(form.get('portfolio') ?? ''),
      agree: Boolean(form.get('agree')),
    };

    const parsed = FormSchema.safeParse(payload);
    if (!parsed.success) {
      setErr(parsed.error.errors[0]?.message ?? 'Please fix the highlighted fields.');
      setLoading(false);
      return;
    }

    // FE-only: store locally to simulate submission + progress
    try {
      const percent = Math.min(100, 30 + subjects.length * 10 + (docCount > 0 ? 20 : 0) + (payload.bio.length > 80 ? 20 : 0));
      localStorage.setItem('teacher.onboarding.data', JSON.stringify({ ...payload, docCount }));
      localStorage.setItem('teacher.onboarding.percent', String(percent));
      setOk(true);
      setLoading(false);
      setTimeout(() => router.push('/teacher/pending'), 600);
    } catch (e) {
      setErr('Could not save locally. Please try again.');
      setLoading(false);
    }
  };

  return (
    <Container className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold">Teacher Onboarding</h1>
          <p className="text-mutedText">Complete the form below. We’ll notify you once approved.</p>
        </div>
        <Badge variant="secondary">Frontend-only</Badge>
      </div>

      {ok && <Alert variant="success">Submitted! Redirecting to Pending…</Alert>}
      {err && <Alert variant="destructive">{err}</Alert>}

      <OnboardingProgress percentKey="teacher.onboarding.percent" />

      <form onSubmit={handleSubmit} className="grid gap-6">
        <Card className="grid md:grid-cols-2 gap-4">
          <div className="space-y-3">
            <label className="text-sm font-medium">Full Name</label>
            <Input name="fullName" placeholder="Your full name" />
            <label className="text-sm font-medium">Email</label>
            <Input type="email" name="email" placeholder="you@gramorx.com" />
            <label className="text-sm font-medium">Phone</label>
            <Input name="phone" placeholder="+92 3XX XXXXXXX" />
          </div>
          <div className="space-y-3">
            <label className="text-sm font-medium">Country</label>
            <Input name="country" placeholder="Pakistan" />
            <label className="text-sm font-medium">City</label>
            <Input name="city" placeholder="Lahore" />
            <label className="text-sm font-medium">Years of Experience</label>
            <Input type="number" min={0} max={50} name="experienceYears" placeholder="3" />
          </div>
        </Card>

        <Card className="grid md:grid-cols-2 gap-4">
          <div className="space-y-3">
            <label className="text-sm font-medium">Subjects</label>
            <Select
              multiple
              value={subjects}
              onChange={(v) => setSubjects(v as string[])}
              options={[
                { label: 'IELTS Speaking', value: 'speaking' },
                { label: 'IELTS Writing', value: 'writing' },
                { label: 'IELTS Reading', value: 'reading' },
                { label: 'IELTS Listening', value: 'listening' },
              ]}
              placeholder="Select one or more"
            />
            <label className="text-sm font-medium">Languages</label>
            <Select
              multiple
              value={languages}
              onChange={(v) => setLanguages(v as string[])}
              options={[
                { label: 'English', value: 'en' },
                { label: 'Urdu', value: 'ur' },
                { label: 'Punjabi', value: 'pa' },
                { label: 'Arabic', value: 'ar' },
              ]}
              placeholder="Select languages you can teach in"
            />
            <label className="text-sm font-medium">Availability</label>
            <Select
              multiple
              value={availability}
              onChange={(v) => setAvailability(v as string[])}
              options={[
                { label: 'Weekdays (Evening)', value: 'weekdays_eve' },
                { label: 'Weekdays (Morning)', value: 'weekdays_morn' },
                { label: 'Weekends', value: 'weekends' },
              ]}
              placeholder="Pick availability"
            />
          </div>
          <div className="space-y-3">
            <label className="text-sm font-medium">Hourly Rate (USD)</label>
            <Input type="number" min={0} name="hourlyRate" placeholder="10" />
            <label className="text-sm font-medium">LinkedIn (optional)</label>
            <Input name="linkedin" placeholder="https://linkedin.com/in/..." />
            <label className="text-sm font-medium">Portfolio / Website (optional)</label>
            <Input name="portfolio" placeholder="https://your.site" />
            <label className="text-sm font-medium">Teaching Bio</label>
            <Textarea name="bio" rows={6} placeholder="Share your teaching approach, achievements, and focus areas..." />
          </div>
        </Card>

        <Card id="documents" className="space-y-4">
          <div className="flex items-center justify-between">
            <h3 className="text-xl font-semibold">Document Verification</h3>
            <Badge>{docCount} file(s) selected</Badge>
          </div>
          <DocumentUploadStub onCountChange={setDocCount} />
        </Card>

        <Card className="space-y-3">
          <div className="flex items-center gap-2">
            <Checkbox name="agree" />
            <span className="text-sm">
              I confirm all details are accurate and agree to GramorX terms & policies.
            </span>
          </div>
          <div className="flex gap-3">
            <Button type="submit" disabled={loading}>{loading ? 'Submitting…' : 'Submit for Review'}</Button>
            <Link href="/teacher" className="btn">Back</Link>
          </div>
        </Card>
      </form>
    </Container>
  );
}
--------------------------------------
File #5.: pages/teacher/Welcome.tsx
// pages/teacher/welcome.tsx
'use client';

import React from 'react';
import { Card } from '@/components/design-system/Card';
import { Button } from '@/components/design-system/Button';
import { Input } from '@/components/design-system/Input';
import { Textarea } from '@/components/design-system/Textarea';
import { Badge } from '@/components/design-system/Badge';
import { ProgressBar } from '@/components/design-system/ProgressBar';
import { Section } from '@/components/design-system/Section';
import { Tabs } from '@/components/design-system/Tabs';

export default function TeacherWelcome() {
  return (
    <div className="container mx-auto max-w-4xl py-10">
      <Section>
        <h1 className="text-3xl font-bold text-foreground">👋 Welcome, Teacher!</h1>
        <p className="mt-2 text-muted-foreground">
          We’re excited to have you join GramorX as an educator. To get started, please
          complete your onboarding so we can approve your profile and unlock your dashboard.
        </p>
      </Section>

      <div className="mt-8 grid gap-8 md:grid-cols-2">
        {/* Left: Profile Setup Form */}
        <Card className="p-6">
          <h2 className="text-xl font-semibold text-foreground">Onboarding Form</h2>
          <p className="mb-4 text-sm text-muted-foreground">
            Provide accurate details to help us verify your teaching profile.
          </p>
          <form className="grid gap-4">
            <Input label="Full Name" placeholder="Enter your full name" required />
            <Input label="Subject Expertise" placeholder="e.g., IELTS Writing" required />
            <Textarea
              label="Teaching Experience"
              placeholder="Describe your years of teaching and certifications"
              rows={4}
              required
            />
            <Input label="LinkedIn / Portfolio (optional)" placeholder="https://..." />
            <Button type="submit" tone="primary" className="w-full mt-2">
              Submit for Approval
            </Button>
          </form>
        </Card>

        {/* Right: Progress & Guidance */}
        <div className="flex flex-col gap-6">
          <Card className="p-6">
            <h2 className="text-xl font-semibold text-foreground">Approval Progress</h2>
            <p className="text-sm text-muted-foreground mb-3">
              Once you submit your details, our admin team will review and notify you.
            </p>
            <ProgressBar value={40} tone="info" />
            <ul className="mt-4 space-y-2 text-sm">
              <li>
                <Badge tone="warning">Pending</Badge> Profile Information
              </li>
              <li>
                <Badge tone="default">Waiting</Badge> Admin Review
              </li>
              <li>
                <Badge tone="default">Locked</Badge> Dashboard Access
              </li>
            </ul>
          </Card>

          <Card className="p-6">
            <h2 className="text-xl font-semibold text-foreground">Helpful Links</h2>
            <Tabs
              items={[
                {
                  label: 'Guidelines',
                  content: (
                    <ul className="list-disc ml-5 text-sm space-y-1 text-muted-foreground">
                      <li>Complete all required fields honestly.</li>
                      <li>Attach certificates or references where possible.</li>
                      <li>Response time: typically 24–48 hours.</li>
                    </ul>
                  ),
                },
                {
                  label: 'FAQ',
                  content: (
                    <p className="text-sm text-muted-foreground">
                      Need help? Visit the <a href="/support" className="text-accent">Support Center</a>.
                    </p>
                  ),
                },
              ]}
            />
          </Card>
        </div>
      </div>
    </div>
  );
}
--------------------------------------
File #6.: pages/teacher/pending.tsx
import * as React from 'react';
import Link from 'next/link';
import { Container } from '@/components/design-system/Container';
import { Card } from '@/components/design-system/Card';
import { Alert } from '@/components/design-system/Alert';
import OnboardingProgress from '@/components/teacher/OnboardingProgress';

export default function TeacherPending() {
  return (
    <Container className="space-y-6">
      <div className="text-center space-y-2">
        <h1 className="text-3xl font-bold">Application Received ✅</h1>
        <p className="text-mutedText">We’re verifying your details. You’ll get an email when approved.</p>
      </div>

      <OnboardingProgress percentKey="teacher.onboarding.percent" />

      <Card className="space-y-3 text-center">
        <p className="text-sm text-mutedText">
          Tip: Keep your profile complete for faster approval. You can still edit your details.
        </p>
        <div className="flex items-center justify-center gap-3">
          <Link href="/teacher/onboarding" className="btn">Edit Details</Link>
          <Link href="/account" className="btn">Go to Account</Link>
        </div>
      </Card>

      <Alert variant="info">Need help? Contact support and mention your registered email.</Alert>
    </Container>
  );
}
--------------------------------------
File #7.: pages/admin/index.tsx
﻿// pages/admin/index.tsx
import React, { useEffect, useMemo, useState } from 'react';
import Head from 'next/head';
import Link from 'next/link';

// ✅ Use DS primitives; fall back to Tailwind if a component is missing in DS.
import { Container } from '@/components/design-system/Container';
// import { Card } from '@/components/design-system/Card';
// import { Button } from '@/components/design-system/Button';
import { RoleGuard } from '@/components/auth/RoleGuard';
import { getCurrentRole } from '@/lib/roles';
import type { AppRole } from '@/lib/roles';
import { useToast } from '@/components/design-system/Toaster';

// ---- Types ----
type KPI = { label: string; value: string; sub?: string; href?: string };
type Signup = { id: string; name: string; email: string; joinedAt: string };
type QueueRow = {
  id: string;
  type: 'writing' | 'speaking';
  status: 'pending' | 'scored' | 'error';
  provider: 'openai' | 'gemini' | 'groq' | 'vertex';
  submittedAt: string;
};
type ModulePerf = {
  module: 'Listening' | 'Reading' | 'Writing' | 'Speaking';
  attempts: number;
  avgBand: number;
  trend: 'up' | 'down' | 'flat';
};

type BlogQueueItem = {
  slug: string;
  title: string;
  author?: string | null;
  category: 'Listening' | 'Reading' | 'Writing' | 'Speaking' | 'Study Plan' | 'Product';
  submittedAt: string;
  tags: string[];
};
type SupportTicket = {
  ticketId: string;
  email: string;
  subject: string;
  category: 'account' | 'billing' | 'modules' | 'ai' | 'technical' | 'other';
  status: 'open' | 'in_progress' | 'resolved' | 'closed';
  createdAt: string;
};

type ProviderStatus = {
  name: 'Supabase' | 'SMTP' | 'OpenAI' | 'Gemini' | 'Groq' | 'Vertex' | 'Storage' | 'Realtime';
  state: 'ok' | 'degraded' | 'down';
  last: string;
  href?: string;
};

export default function AdminIndex() {
  // Faux loading for polish
  const [loading, setLoading] = useState(true);
  const [role, setRole] = useState<AppRole | null>(null);

  // 🔎 Top toolbar state
  const [range, setRange] = useState<'7d' | '30d' | '90d'>('7d');
  const [module, setModule] = useState<'all' | 'listening' | 'reading' | 'writing' | 'speaking'>('all');
  const [q, setQ] = useState(''); // global quick search filter (signups, tickets)

  const { success, error: toastError } = useToast();

  // 🧪 Demo data — replace with Supabase later
  const kpis: KPI[] = useMemo(
    () => [
      { label: 'Active Students', value: '1,284', sub: 'last 7 days', href: '/admin/students?active=1' },
      { label: 'Weekly Attempts', value: '3,942', sub: 'all modules', href: `/admin/reports?range=last-7d` },
      { label: 'Avg Band (All)', value: '6.4', sub: '±0.2 vs prev', href: `/admin/reports?range=last-7d&module=${module}` },
      { label: 'AI Queue Pending', value: '37', sub: 'writing/speaking', href: '/admin/ai-queue?status=pending' },
      { label: 'New Blog Submissions', value: '5', sub: 'awaiting review', href: '/admin/blog/moderation' },
      { label: 'Open Support Tickets', value: '12', sub: 'last 24h', href: '/admin/support' },
    ],
    [module]
  );

  const signups: Signup[] = [
    { id: 'u1', name: 'Ayesha Khan', email: 'ayesha@example.com', joinedAt: '2025-08-21 15:12' },
    { id: 'u2', name: 'Bilal Ahmed', email: 'bilal@example.com', joinedAt: '2025-08-21 13:47' },
    { id: 'u3', name: 'Chen Wei', email: 'chen@example.com', joinedAt: '2025-08-21 11:05' },
  ];

  const queue: QueueRow[] = [
    { id: 'q101', type: 'speaking', status: 'pending', provider: 'groq', submittedAt: '2025-08-22 22:11' },
    { id: 'q102', type: 'writing', status: 'pending', provider: 'vertex', submittedAt: '2025-08-22 21:58' },
    { id: 'q103', type: 'speaking', status: 'error', provider: 'gemini', submittedAt: '2025-08-22 21:50' },
  ];

  const perf: ModulePerf[] = [
    { module: 'Listening', attempts: 1094, avgBand: 6.7, trend: 'up' },
    { module: 'Reading', attempts: 986, avgBand: 6.5, trend: 'flat' },
    { module: 'Writing', attempts: 934, avgBand: 6.0, trend: 'up' },
    { module: 'Speaking', attempts: 928, avgBand: 6.2, trend: 'down' },
  ];

  const blogQueue: BlogQueueItem[] = [
    {
      slug: 'speaking-part-3-follow-up-mastery',
      title: 'Speaking Part 3: Follow-up Mastery',
      author: 'teacher_ali',
      category: 'Speaking',
      submittedAt: '2025-08-22 20:31',
      tags: ['speaking', 'band-7'],
    },
    {
      slug: 'reading-matching-headings-quick-scan',
      title: 'Reading: Matching Headings with Quick Scan',
      author: 'coach_mina',
      category: 'Reading',
      submittedAt: '2025-08-22 18:04',
      tags: ['reading', 'scan', 'tactics'],
    },
    {
      slug: 'writing-task-1-trends-phrasing',
      title: 'Writing Task 1: Trends & Phrasing Pack',
      author: 'mentor_omar',
      category: 'Writing',
      submittedAt: '2025-08-22 16:49',
      tags: ['writing', 'task1'],
    },
  ];

  const tickets: SupportTicket[] = [
    {
      ticketId: 'GX-20250823-AB12CD',
      email: 'sara@example.com',
      subject: 'Mic not working in Speaking',
      category: 'technical',
      status: 'open',
      createdAt: '2025-08-23 09:22',
    },
    {
      ticketId: 'GX-20250823-EF34GH',
      email: 'omer@example.com',
      subject: 'Upgrade to Booster failed',
      category: 'billing',
      status: 'in_progress',
      createdAt: '2025-08-23 08:11',
    },
    {
      ticketId: 'GX-20250822-IJ56KL',
      email: 'nida@example.com',
      subject: 'How to submit Writing Task 2?',
      category: 'modules',
      status: 'resolved',
      createdAt: '2025-08-22 21:42',
    },
  ];

  const providers: ProviderStatus[] = [
    { name: 'Supabase', state: 'ok', last: 'now', href: '/admin/system/supabase' },
    { name: 'SMTP', state: 'ok', last: '5m ago', href: '/admin/system/email' },
    { name: 'OpenAI', state: 'ok', last: 'now', href: '/admin/ai-usage?provider=openai' },
    { name: 'Gemini', state: 'degraded', last: '12m ago', href: '/admin/ai-usage?provider=gemini' },
    { name: 'Groq', state: 'ok', last: '2m ago', href: '/admin/ai-usage?provider=groq' },
    { name: 'Vertex', state: 'ok', last: '3m ago', href: '/admin/ai-usage?provider=vertex' },
    { name: 'Storage', state: 'ok', last: 'now', href: '/admin/system/storage' },
    { name: 'Realtime', state: 'ok', last: 'now', href: '/admin/system/realtime' },
  ];

  useEffect(() => {
    const t = setTimeout(() => setLoading(false), 600);
    return () => clearTimeout(t);
  }, []);

  useEffect(() => {
    getCurrentRole().then((r) => setRole(r));
  }, []);

  // CSV export for quick wins
  const exportCSV = () => {
    const rows = [
      ['module', 'attempts', 'avgBand'],
      ...perf.map((r) => [r.module, String(r.attempts), String(r.avgBand)]),
    ];
    const blob = new Blob([rows.map((r) => r.join(',')).join('\n')], {
      type: 'text/csv;charset=utf-8;',
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `module-performance-${range}.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  // Handlers
  const moderatePost = async (slug: string, action: 'approve' | 'reject') => {
    try {
      const res = await fetch('/api/blog/moderate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ action, slug }),
      });
      const data = await res.json().catch(() => ({}));
      if (res.ok) {
        success(
          data?.message || `Post ${action === 'approve' ? 'approved' : 'rejected'}`
        );
      } else {
        toastError(data?.error || 'Moderation failed');
      }
    } catch (err) {
      toastError(err instanceof Error ? err.message : 'Moderation failed');
    }
  };

  const approvePost = (slug: string) => moderatePost(slug, 'approve');
  const rejectPost = (slug: string) => moderatePost(slug, 'reject');

  const filteredSignups = signups.filter((s) =>
    q ? (s.name + s.email).toLowerCase().includes(q.toLowerCase()) : true
  );
  const filteredTickets = tickets.filter((t) =>
    q ? (t.ticketId + t.email + t.subject).toLowerCase().includes(q.toLowerCase()) : true
  );

  return (
    <RoleGuard allow={['admin', 'teacher'] as any}>
      <Head>
        <title>Admin • Overview</title>
      </Head>

      <Container as="main" className="py-6 md:py-10">
        {/* Header */}
        <div className="flex flex-col md:flex-row md:items-end md:justify-between gap-4">
          <div>
            <h1 className="text-h2 md:text-h1 font-semibold tracking-tight">Admin Dashboard</h1>
            <p className="text-small text-muted-foreground mt-1">
              Overview of IELTS modules, AI evaluation, blog moderation, and support operations.
            </p>
          </div>

          {/* Top toolbar */}
          <div className="flex flex-wrap items-center gap-2">
            <select
              value={range}
              onChange={(e) => setRange(e.target.value as any)}
              className="h-9 rounded-xl border bg-transparent px-3 text-small"
              aria-label="Date Range"
            >
              <option value="7d">Last 7 days</option>
              <option value="30d">Last 30 days</option>
              <option value="90d">Last 90 days</option>
            </select>

            <select
              value={module}
              onChange={(e) => setModule(e.target.value as any)}
              className="h-9 rounded-xl border bg-transparent px-3 text-small"
              aria-label="Module"
            >
              <option value="all">All Modules</option>
              <option value="listening">Listening</option>
              <option value="reading">Reading</option>
              <option value="writing">Writing</option>
              <option value="speaking">Speaking</option>
            </select>

            <input
              value={q}
              onChange={(e) => setQ(e.target.value)}
              placeholder="Search (students, tickets)…"
              className="h-9 rounded-xl border bg-transparent px-3 text-small w-56"
            />
            <button
              onClick={exportCSV}
              className="h-9 rounded-xl border px-3 text-small hover:bg-muted"
              aria-label="Export CSV"
            >
              Export CSV
            </button>
          </div>
        </div>

        {/* Quick Nav */}
        <div className="mt-6 grid grid-cols-2 md:grid-cols-4 xl:grid-cols-6 gap-3">
          {[
            { label: 'Students', href: '/admin/students?active=1', roles: ['admin', 'teacher'] },
            { label: 'Teachers', href: '/admin/teachers', roles: ['admin'] },
            { label: 'Reports', href: `/admin/reports?range=last-7d`, roles: ['admin', 'teacher'] },
            { label: 'AI Queue', href: '/admin/ai-queue?status=pending', roles: ['admin'] },
            { label: 'Blog Moderation', href: '/admin/blog/moderation', roles: ['admin', 'teacher'] },
            { label: 'Support', href: '/admin/support', roles: ['admin', 'teacher'] },
          ]
            .filter((item) => !role || item.roles.includes(role))
            .map((item) => (
              <Link
                key={item.label}
                href={item.href}
                className="group rounded-2xl border p-3 hover:bg-muted transition"
              >
                <div className="font-medium">{item.label}</div>
                <div className="text-caption text-muted-foreground group-hover:underline">Open →</div>
              </Link>
            ))}
        </div>

        {role === 'admin' && (
          <Link href="/admin/users" className="font-medium text-primary hover:underline">
            Manage Users
          </Link>
        )}

        {/* KPI Cards */}
        <section className="mt-6 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4">
          {kpis.map((k) => (
            <Link
              key={k.label}
              href={k.href || '#'}
              className="rounded-2xl border p-4 hover:shadow-sm hover:-translate-y-0.5 transition bg-card"
            >
              <div className="text-small text-muted-foreground">{k.label}</div>
              <div className="text-h2 font-semibold mt-1">{k.value}</div>
              {k.sub && <div className="text-caption text-muted-foreground mt-1">{k.sub}</div>}
            </Link>
          ))}
        </section>

        {/* Module Health */}
        <section className="mt-8">
          <h2 className="text-h4 font-semibold">IELTS Module Health</h2>
          <div className="mt-3 grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-3">
            {perf.map((m) => {
              const slug = m.module.toLowerCase();
              return (
                <Link
                  key={m.module}
                  href={`/admin/modules/${slug}?range=${range}`}
                  className="rounded-2xl border p-4 hover:bg-muted transition"
                >
                  <div className="flex items-center justify-between">
                    <div className="font-medium">{m.module}</div>
                    <span
                      className={{
                        up: 'text-success dark:text-success',
                        down: 'text-danger dark:text-danger',
                        flat: 'text-muted-foreground',
                      }[m.trend]}
                    >
                      {m.trend === 'up' ? '▲' : m.trend === 'down' ? '▼' : '–'}
                    </span>
                  </div>
                  <div className="text-small text-muted-foreground mt-1">{m.attempts} attempts</div>
                  <div className="text-h3 font-semibold mt-1">Avg {m.avgBand.toFixed(1)}</div>
                </Link>
              );
            })}
          </div>
        </section>

        {/* Three-up: AI Queue + Recent Signups + System Status */}
        <section className="mt-8 grid grid-cols-1 xl:grid-cols-3 gap-4">
          {/* AI Queue */}
          <div className="rounded-2xl border overflow-hidden">
            <div className="flex items-center justify-between p-4">
              <h3 className="font-semibold">AI Evaluation Queue</h3>
              <Link className="text-small underline" href="/admin/ai-queue?status=pending">
                Open full queue
              </Link>
            </div>
            <div className="border-t">
              {loading ? (
                <SkeletonRows rows={3} />
              ) : (
                <table className="w-full text-small">
                  <thead className="text-left text-muted-foreground">
                    <tr className="border-b">
                      <th className="p-3">ID</th>
                      <th className="p-3">Type</th>
                      <th className="p-3">Provider</th>
                      <th className="p-3">Status</th>
                      <th className="p-3">Submitted</th>
                      <th className="p-3"></th>
                    </tr>
                  </thead>
                  <tbody>
                    {queue.map((r) => (
                      <tr key={r.id} className="border-b last:border-0">
                        <td className="p-3 font-mono text-caption">{r.id}</td>
                        <td className="p-3 capitalize">{r.type}</td>
                        <td className="p-3 uppercase text-caption">{r.provider}</td>
                        <td className="p-3">
                          <span
                            className={`rounded-full px-2 py-0.5 text-caption border ${
                              r.status === 'pending'
                                ? 'border-warning text-warning dark:text-warning'
                                : r.status === 'scored'
                                ? 'border-success text-success dark:text-success'
                                : 'border-danger text-danger dark:text-danger'
                            }`}
                          >
                            {r.status}
                          </span>
                        </td>
                        <td className="p-3 text-caption text-muted-foreground">{r.submittedAt}</td>
                        <td className="p-3">
                          <Link
                            href={`/admin/moderation?type=${r.type}&attempt=${r.id}`}
                            className="text-caption underline"
                          >
                            Review →
                          </Link>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              )}
            </div>
          </div>

          {/* Recent Signups */}
          <div className="rounded-2xl border overflow-hidden">
            <div className="flex items-center justify-between p-4">
              <h3 className="font-semibold">Recent Signups</h3>
              <Link className="text-small underline" href="/admin/students?sort=joined_at.desc">
                View all
              </Link>
            </div>
            <div className="border-t">
              {loading ? (
                <SkeletonRows rows={3} />
              ) : (
                <table className="w-full text-small">
                  <thead className="text-left text-muted-foreground">
                    <tr className="border-b">
                      <th className="p-3">Name</th>
                      <th className="p-3">Email</th>
                      <th className="p-3">Joined</th>
                      <th className="p-3"></th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredSignups.map((s) => (
                      <tr key={s.id} className="border-b last:border-0">
                        <td className="p-3">{s.name}</td>
                        <td className="p-3 text-caption text-muted-foreground">{s.email}</td>
                        <td className="p-3 text-caption text-muted-foreground">{s.joinedAt}</td>
                        <td className="p-3">
                          <Link className="text-caption underline" href={`/admin/students?id=${s.id}`}>
                            Open →
                          </Link>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              )}
            </div>
          </div>

          {/* System Status */}
          <div className="rounded-2xl border overflow-hidden">
            <div className="flex items-center justify-between p-4">
              <h3 className="font-semibold">System Status</h3>
              <Link className="text-small underline" href="/admin/system">
                Status page
              </Link>
            </div>
            <div className="border-t divide-y">
              {providers.map((p) => (
                <Link
                  key={p.name}
                  href={p.href || '#'}
                  className="flex items-center justify-between p-3 hover:bg-muted transition"
                >
                  <div className="flex items-center gap-3">
                    <StatusDot state={p.state} />
                    <div className="font-medium">{p.name}</div>
                  </div>
                  <div
                    className={
                      p.state === 'ok'
                        ? 'text-caption text-success dark:text-success'
                        : p.state === 'degraded'
                        ? 'text-caption text-warning dark:text-warning'
                        : 'text-caption text-danger dark:text-danger'
                    }
                  >
                    {p.state.toUpperCase()} • {p.last}
                  </div>
                </Link>
              ))}
            </div>
          </div>
        </section>

        {/* Two-up: Blog Moderation + Support Tickets */}
        <section className="mt-8 grid grid-cols-1 lg:grid-cols-2 gap-4">
          {/* Blog Moderation Queue */}
          <div className="rounded-2xl border overflow-hidden">
            <div className="flex items-center justify-between p-4">
              <h3 className="font-semibold">Blog Moderation Queue</h3>
              <div className="flex items-center gap-2">
                <Link className="text-small underline" href="/admin/blog/new">
                  New post
                </Link>
                <Link className="text-small underline" href="/admin/blog/moderation">
                  Open queue
                </Link>
              </div>
            </div>
            <div className="border-t">
              {loading ? (
                <SkeletonRows rows={3} />
              ) : blogQueue.length === 0 ? (
                <div className="p-4 text-small text-muted-foreground">No submissions — great!</div>
              ) : (
                <table className="w-full text-small">
                  <thead className="text-left text-muted-foreground">
                    <tr className="border-b">
                      <th className="p-3">Title</th>
                      <th className="p-3">Category</th>
                      <th className="p-3">Author</th>
                      <th className="p-3">Tags</th>
                      <th className="p-3">Submitted</th>
                      <th className="p-3 text-right">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {blogQueue.map((b) => (
                      <tr key={b.slug} className="border-b last:border-0">
                        <td className="p-3">
                          <Link className="underline" href={`/blog/${b.slug}`}>
                            {b.title}
                          </Link>
                        </td>
                        <td className="p-3">{b.category}</td>
                        <td className="p-3 text-caption text-muted-foreground">{b.author ?? '—'}</td>
                        <td className="p-3">
                          <div className="flex flex-wrap gap-1">
                            {b.tags.map((t) => (
                              <span
                                key={t}
                                className="px-2 py-0.5 rounded-lg text-caption bg-white/60 dark:bg-white/10"
                              >
                                #{t}
                              </span>
                            ))}
                          </div>
                        </td>
                        <td className="p-3 text-caption text-muted-foreground">{b.submittedAt}</td>
                        <td className="p-3">
                          <div className="flex items-center justify-end gap-2">
                            <button
                              onClick={() => approvePost(b.slug)}
                              className="h-8 rounded-lg border px-2 text-caption hover:bg-success/10 dark:hover:bg-success/10"
                              aria-label="Approve"
                            >
                              Approve
                            </button>
                            <button
                              onClick={() => rejectPost(b.slug)}
                              className="h-8 rounded-lg border px-2 text-caption hover:bg-danger/10 dark:hover:bg-danger/10"
                              aria-label="Reject"
                            >
                              Reject
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              )}
            </div>
          </div>

          {/* Support Tickets */}
          <div className="rounded-2xl border overflow-hidden">
            <div className="flex items-center justify-between p-4">
              <h3 className="font-semibold">Support Tickets (24h)</h3>
              <Link className="text-small underline" href="/admin/support">
                Open Support
              </Link>
            </div>
            <div className="border-t">
              {loading ? (
                <SkeletonRows rows={3} />
              ) : filteredTickets.length === 0 ? (
                <div className="p-4 text-small text-muted-foreground">No tickets match your search.</div>
              ) : (
                <table className="w-full text-small">
                  <thead className="text-left text-muted-foreground">
                    <tr className="border-b">
                      <th className="p-3">Ticket</th>
                      <th className="p-3">Subject</th>
                      <th className="p-3">Category</th>
                      <th className="p-3">Status</th>
                      <th className="p-3">Created</th>
                      <th className="p-3"></th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredTickets.map((t) => (
                      <tr key={t.ticketId} className="border-b last:border-0">
                        <td className="p-3 font-mono text-caption">{t.ticketId}</td>
                        <td className="p-3">
                          <div className="truncate max-w-[18ch]" title={t.subject}>
                            {t.subject}
                          </div>
                          <div className="text-caption text-muted-foreground">{t.email}</div>
                        </td>
                        <td className="p-3 capitalize">{t.category}</td>
                        <td className="p-3">
                          <span
                            className={`rounded-full px-2 py-0.5 text-caption border ${
                              t.status === 'open'
                                ? 'border-amber-400 text-amber-600 dark:text-amber-400'
                                : t.status === 'in_progress'
                                ? 'border-blue-500 text-electricBlue dark:text-blue-400'
                                : t.status === 'resolved'
                                ? 'border-green-500 text-success dark:text-green-400'
                                : 'border-muted-foreground text-muted-foreground'
                            }`}
                          >
                            {t.status.replace('_', ' ')}
                          </span>
                        </td>
                        <td className="p-3 text-caption text-muted-foreground">{t.createdAt}</td>
                        <td className="p-3">
                          <Link className="text-caption underline" href={`/admin/support?ticket=${t.ticketId}`}>
                            Open →
                          </Link>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              )}
            </div>
          </div>
        </section>

        {/* CTA Row */}
        {role === 'admin' && (
          <section className="mt-8 flex flex-wrap gap-2">
            <Link
              href="/admin/reports?range=last-30d&module=all"
              className="rounded-xl border px-4 h-10 inline-grid place-items-center hover:bg-muted"
            >
              Generate Monthly Report
            </Link>
            <Link
              href="/admin/teachers?invite=1"
              className="rounded-xl border px-4 h-10 inline-grid place-items-center hover:bg-muted"
            >
              Invite Teacher
            </Link>
            <Link
              href="/admin/tools/cache?invalidate=1"
              className="rounded-xl border px-4 h-10 inline-grid place-items-center hover:bg-muted"
            >
              Invalidate Caches
            </Link>
            <Link
              href="/admin/blog/new"
              className="rounded-xl border px-4 h-10 inline-grid place-items-center hover:bg-muted"
            >
              Compose Blog Post
            </Link>
            <Link
              href="/admin/system/sync"
              className="rounded-xl border px-4 h-10 inline-grid place-items-center hover:bg-muted"
            >
              Run Nightly Sync
            </Link>
          </section>
        )}
      </Container>
    </RoleGuard>
  );
}

// ---- Small UI helpers ----
function SkeletonRows({ rows = 3 }: { rows?: number }) {
  return (
    <div className="p-3 space-y-2">
      {Array.from({ length: rows }).map((_, i) => (
        <div key={i} className="h-10 rounded-md bg-muted animate-pulse" />
      ))}
    </div>
  );
}

function StatusDot({ state }: { state: ProviderStatus['state'] }) {
  const cls =
    state === 'ok'
      ? 'bg-success'
      : state === 'degraded'
      ? 'bg-warning'
      : 'bg-danger';
  return <span className={`inline-block w-2.5 h-2.5 rounded-full ${cls}`} aria-hidden="true" />;
}
--------------------------------------
File #8.: pages/admin/imp-as.tsx
// pages/admin/imp-as.tsx
import { useEffect } from 'react';
import Head from 'next/head';

export default function ImpAs() {
  useEffect(() => {
    try {
      const u = new URL(window.location.href);
      const userId = u.searchParams.get('u') || '';
      localStorage.setItem('impersonating', '1');
      if (userId) localStorage.setItem('impUserId', userId);
      localStorage.setItem('impStartedAt', String(Date.now()));
      // Send to home (or any page you like)
      window.location.replace('/');
    } catch {
      window.location.replace('/');
    }
  }, []);

  return (
    <>
      <Head><title>Switching…</title></Head>
      <div className="min-h-[100dvh] grid place-items-center">
        <div className="animate-pulse text-small opacity-70">Switching to impersonated session…</div>
      </div>
    </>
  );
}
--------------------------------------
File #9.: pages/admin/content/reading.tsx
// pages/admin/content/reading.tsx
import React, { useEffect, useState } from 'react';
import Head from 'next/head';
import { AdminGuard } from '@/components/auth/AdminGuard';
import { supabaseBrowser } from '@/lib/supabaseBrowser';
import { Container } from '@/components/design-system/Container';

type ReadingTest = {
  id: string;
  title: string;
  level: string | null;
  created_at: string;
};

export default function ReadingContent() {
  const [tests, setTests] = useState<ReadingTest[]>([]);
  const [title, setTitle] = useState('');
  const [level, setLevel] = useState('Academic');
  const [busy, setBusy] = useState(false);

  const refresh = async () => {
    const { data, error } = await supabaseBrowser
      .from('reading_tests')
      .select('id,title,level,created_at')
      .order('created_at', { ascending: false });
    if (!error && data) setTests(data as ReadingTest[]);
  };

  useEffect(() => { refresh(); }, []);

  const createTest = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!title.trim()) return;
    setBusy(true);
    const { data: userData } = await supabaseBrowser.auth.getUser();
    const created_by = userData?.user?.id ?? null;
    const { error } = await supabaseBrowser.from('reading_tests').insert([{ title, level, created_by }]);
    setBusy(false);
    if (!error) {
      setTitle('');
      setLevel('Academic');
      await refresh();
    } else {
      alert(error.message);
    }
  };

  const remove = async (id: string) => {
    if (!confirm('Delete this test?')) return;
    const { error } = await supabaseBrowser.from('reading_tests').delete().eq('id', id);
    if (error) { alert(error.message); return; }
    await refresh();
  };

  return (
    <AdminGuard>
      <Head><title>Admin · Reading Content</title></Head>
      <Container className="py-8">
        <h1 className="text-h2 font-semibold mb-6">Reading — Tests</h1>

        <form onSubmit={createTest} className="rounded-2xl border p-4 grid gap-3 sm:grid-cols-3">
          <input
            className="sm:col-span-2 rounded-xl border px-3 py-2 bg-transparent"
            placeholder="Test title (e.g., Academic Demo 01)"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
          />
          <select
            className="rounded-xl border px-3 py-2 bg-transparent"
            value={level}
            onChange={(e) => setLevel(e.target.value)}
          >
            <option>Academic</option>
            <option>General</option>
            <option>A1</option><option>A2</option>
            <option>B1</option><option>B2</option>
            <option>C1</option><option>C2</option>
          </select>
          <div className="sm:col-span-3 flex justify-end">
            <button
              disabled={busy}
              className="rounded-xl border px-4 py-2 hover:shadow-sm disabled:opacity-50"
            >
              {busy ? 'Creating…' : 'Create Test'}
            </button>
          </div>
        </form>

        <div className="mt-6 rounded-2xl border overflow-hidden">
          <table className="w-full text-small">
            <thead className="bg-black/5 dark:bg-white/5">
              <tr>
                <th className="text-left p-3">Title</th>
                <th className="text-left p-3">Level</th>
                <th className="text-left p-3">Created</th>
                <th className="text-right p-3">Actions</th>
              </tr>
            </thead>
            <tbody>
              {tests.map(t => (
                <tr key={t.id} className="border-t">
                  <td className="p-3">{t.title}</td>
                  <td className="p-3">{t.level}</td>
                  <td className="p-3">{new Date(t.created_at).toLocaleString()}</td>
                  <td className="p-3 text-right">
                    {/* Future: Edit builder for passages/questions */}
                    <button
                      onClick={() => remove(t.id)}
                      className="rounded-lg border px-3 py-1 hover:shadow-sm"
                    >
                      Delete
                    </button>
                  </td>
                </tr>
              ))}
              {tests.length === 0 && (
                <tr><td colSpan={4} className="p-6 text-center opacity-70">No tests yet.</td></tr>
              )}
            </tbody>
          </table>
        </div>
      </Container>
    </AdminGuard>
  );
}
--------------------------------------
File #10.: pages/admin/teachers/index.tsx
import * as React from 'react';
import type { GetServerSideProps, InferGetServerSidePropsType } from 'next';
import Link from 'next/link';
import { requireRole } from '@/lib/requireRole';
import { supabaseAdmin } from '@/lib/supabaseAdmin'; // ⬅️ use admin client (bypass RLS)
import { Container } from '@/components/design-system/Container';
import { Card } from '@/components/design-system/Card';
import { Button } from '@/components/design-system/Button';
import { Badge } from '@/components/design-system/Badge';
import { Input } from '@/components/design-system/Input';
import { Select } from '@/components/design-system/Select';
import { Alert } from '@/components/design-system/Alert';

type TeacherRow = {
  id: string;
  email?: string | null;
  full_name?: string | null;
  role: 'user' | 'teacher' | 'admin';
  teacher_onboarding_completed: boolean | null;
  teacher_approved: boolean | null;
  teacher_subjects: string[] | null;
  teacher_bio?: string | null;
  created_at?: string | null;
  updated_at?: string | null;
};

type PageProps = {
  initialRows: TeacherRow[];
  fetchError?: string | null;
};

export const getServerSideProps: GetServerSideProps<PageProps> = async (ctx) => {
  const ok = await requireRole(ctx.req, ctx.res, 'admin');
  if (!ok) return { props: { initialRows: [] } };

  // 🚩 Admin client avoids RLS “no rows” problem
  const supa = supabaseAdmin();

  const { data, error } = await supa
    .from<Partial<TeacherRow> & { id: string }>('user_profiles')
    .select('id, full_name, role, teacher_onboarding_completed, teacher_approved, teacher_subjects, teacher_bio, created_at, updated_at, email')
    .eq('role', 'teacher')
    .order('created_at', { ascending: false });

  return {
    props: {
      initialRows: (data as TeacherRow[]) ?? [],
      fetchError: error?.message ?? null,
    },
  };
};

export default function AdminTeachersPage(
  { initialRows, fetchError }: InferGetServerSidePropsType<typeof getServerSideProps>
) {
  const [rows, setRows] = React.useState<TeacherRow[]>(initialRows);
  const [query, setQuery] = React.useState('');
  const [status, setStatus] = React.useState<'all' | 'pending' | 'approved'>('all');
  const [busyId, setBusyId] = React.useState<string | null>(null);
  const [errorMsg, setErrorMsg] = React.useState<string | null>(fetchError ?? null);

  const filtered = React.useMemo(() => {
    const q = query.trim().toLowerCase();
    return rows.filter((r) => {
      if (status === 'pending' && r.teacher_approved) return false;
      if (status === 'approved' && !r.teacher_approved) return false;
      if (!q) return true;
      const hay = `${r.full_name ?? ''} ${r.email ?? ''} ${(r.teacher_subjects ?? []).join(' ')}`.toLowerCase();
      return hay.includes(q);
    });
  }, [rows, query, status]);

  async function toggleApproval(userId: string, approved: boolean) {
    setErrorMsg(null);
    setBusyId(userId);
    try {
      const res = await fetch('/api/admin/teachers/approve', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, approved }),
      });
      if (!res.ok) {
        const j = (await res.json().catch(() => null)) as { error?: string } | null;
        throw new Error(j?.error || 'Request failed');
      }
      setRows((prev) => prev.map((r) => (r.id === userId ? { ...r, teacher_approved: approved } as TeacherRow : r)));
    } catch (e: unknown) {
      setErrorMsg(e instanceof Error ? e.message : 'Something went wrong');
    } finally {
      setBusyId(null);
    }
  }

  return (
    <Container className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold">Teachers</h1>
          <p className="text-mutedText">Review and approve teacher onboarding requests.</p>
        </div>
        <div className="flex gap-2">
          <Link href="/admin" className="btn">Admin Home</Link>
        </div>
      </div>

      {errorMsg && <Alert variant="destructive">{errorMsg}</Alert>}

      <Card className="grid md:grid-cols-3 gap-3">
        <Input value={query} onChange={(e) => setQuery(e.target.value)} placeholder="Search by name, email or subject" />
        <Select
          value={status}
          onChange={(v) => setStatus((v as 'all' | 'pending' | 'approved') ?? 'all')}
          options={[
            { label: 'All', value: 'all' },
            { label: 'Pending', value: 'pending' },
            { label: 'Approved', value: 'approved' },
          ]}
        />
        <div className="flex items-center gap-2">
          <Badge>All: {rows.length}</Badge>
          <Badge variant="secondary">Pending: {rows.filter((r) => !r.teacher_approved).length}</Badge>
          <Badge variant="secondary">Approved: {rows.filter((r) => r.teacher_approved).length}</Badge>
        </div>
      </Card>

      <Card className="overflow-x-auto">
        <table className="w-full text-sm">
          <thead>
            <tr className="text-left">
              <th className="py-3 pr-4">Teacher</th>
              <th className="py-3 pr-4">Subjects</th>
              <th className="py-3 pr-4">Status</th>
              <th className="py-3 pr-4">Applied</th>
              <th className="py-3 pr-4">Actions</th>
            </tr>
          </thead>
          <tbody>
            {filtered.length === 0 && (
              <tr>
                <td className="py-6 text-mutedText" colSpan={5}>
                  No records found.
                </td>
              </tr>
            )}
            {filtered.map((r) => {
              const subs = r.teacher_subjects?.length ? r.teacher_subjects.join(', ') : '—';
              const applied = r.created_at ? new Date(r.created_at).toLocaleString() : '—';
              const pending = !r.teacher_approved;
              return (
                <tr key={r.id} className="border-t border-border">
                  <td className="py-3 pr-4">
                    <div className="font-medium">{r.full_name || '—'}</div>
                    <div className="text-mutedText">{r.email || '—'}</div>
                  </td>
                  <td className="py-3 pr-4">{subs}</td>
                  <td className="py-3 pr-4">
                    {pending ? <Badge variant="secondary">Pending</Badge> : <Badge>Approved</Badge>}
                    {r.teacher_onboarding_completed ? (
                      <span className="ml-2 text-xs text-mutedText">Onboarding ✓</span>
                    ) : (
                      <span className="ml-2 text-xs text-mutedText">Onboarding ⏳</span>
                    )}
                  </td>
                  <td className="py-3 pr-4">{applied}</td>
                  <td className="py-3 pr-4">
                    <div className="flex gap-2">
                      <Link href={`/admin/teachers/${r.id}`} className="btn">View</Link>
                      {pending ? (
                        <Button onClick={() => toggleApproval(r.id, true)} disabled={busyId === r.id}>
                          {busyId === r.id ? 'Approving…' : 'Approve'}
                        </Button>
                      ) : (
                        <Button variant="secondary" onClick={() => toggleApproval(r.id, false)} disabled={busyId === r.id}>
                          {busyId === r.id ? 'Reverting…' : 'Revert'}
                        </Button>
                      )}
                    </div>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </Card>

      <Card className="space-y-2">
        <div className="text-sm text-mutedText">
          ✅ <strong>Tip:</strong> If this list is empty, your teacher form may still be **frontend-only**.
          Hook it to <code>/api/teacher/apply</code> so rows save into <code>user_profiles</code>.
        </div>
      </Card>
    </Container>
  );
}
--------------------------------------
File #11.: pages/admin/students/index.tsx
// pages/admin/students/index.tsx
import React, { useEffect, useState } from 'react';
import Head from 'next/head';
import { AdminGuard } from '@/components/auth/AdminGuard';
import { supabaseBrowser } from '@/lib/supabaseBrowser';
import { Container } from '@/components/design-system/Container';
import type { Profile } from '@/types/profile';

export default function Students() {
  const [q, setQ] = useState('');
  const [rows, setRows] = useState<Profile[]>([]);

  useEffect(() => {
    (async () => {
      let query = supabaseBrowser
        .from('profiles')
        .select('id, full_name, email, created_at, role')
        .order('created_at', { ascending: false })
        .limit(200);
      if (q.trim()) {
        query = query.ilike('full_name', `%${q}%`);
      }
      const { data } = await query;
      if (data) setRows(data as Profile[]);
    })();
  }, [q]);

  return (
    <AdminGuard>
      <Head><title>Admin · Students</title></Head>
      <Container className="py-8">
        <h1 className="text-h2 font-semibold mb-4">Students</h1>
        <input
          className="rounded-xl border px-3 py-2 bg-transparent w-full sm:w-80"
          placeholder="Search by name…"
          value={q}
          onChange={(e) => setQ(e.target.value)}
        />
        <div className="mt-4 rounded-2xl border overflow-hidden">
          <table className="w-full text-small">
            <thead className="bg-black/5 dark:bg-white/5">
              <tr>
                <th className="text-left p-3">Name</th>
                <th className="text-left p-3">Email</th>
                <th className="text-left p-3">Role</th>
                <th className="text-left p-3">Joined</th>
              </tr>
            </thead>
            <tbody>
              {rows.map(r => (
                <tr key={r.id} className="border-t">
                  <td className="p-3">{r.full_name ?? '—'}</td>
                  <td className="p-3">{r.email ?? '—'}</td>
                  <td className="p-3">{r.role ?? 'student'}</td>
                  <td className="p-3">{r.created_at ? new Date(r.created_at).toLocaleDateString() : '—'}</td>
                </tr>
              ))}
              {rows.length === 0 && (
                <tr><td colSpan={4} className="p-6 text-center opacity-70">No students.</td></tr>
              )}
            </tbody>
          </table>
        </div>
      </Container>
    </AdminGuard>
  );
}
--------------------------------------
File #12.: pages/admin/partners/index.tsx
import * as React from 'react';
import Head from 'next/head';
import type { NextPage } from 'next';
import { getPartnerSummary, type PartnerSummary } from '@/lib/api/partners';
import { getReferralStats, type ReferralStats } from '@/lib/api/referrals';

const AdminPartnersPage: NextPage = () => {
  const [summary, setSummary] = React.useState<PartnerSummary | null>(null);
  const [stats, setStats] = React.useState<ReferralStats | null>(null);
  const [loading, setLoading] = React.useState(true);
  const [err, setErr] = React.useState<string | null>(null);

  React.useEffect(() => {
    (async () => {
      try {
        const [s, r] = await Promise.all([getPartnerSummary(), getReferralStats()]);
        if (!('ok' in s) || !s.ok) throw new Error((s as any).error || 'Summary load failed');
        if (!('ok' in r) || !r.ok) throw new Error((r as any).error || 'Stats load failed');
        setSummary(s.summary);
        setStats(r.stats);
      } catch (e) {
        setErr((e as Error).message);
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  return (
    <>
      <Head><title>Admin — Partners</title></Head>
      <main className="min-h-screen bg-background text-foreground">
        <div className="mx-auto max-w-6xl px-4 py-8">
          <h1 className="text-h1 font-semibold">Admin • Partners</h1>
          <p className="text-small text-muted-foreground">Internal snapshot for your partner performance.</p>

          {loading ? (
            <div className="mt-6 rounded-lg border border-border p-4">Loading…</div>
          ) : err ? (
            <div className="mt-6 rounded-lg border border-destructive/40 bg-destructive/10 p-4">
              <p className="font-medium">Couldn’t load data</p>
              <p className="text-small opacity-90">{err}</p>
            </div>
          ) : (
            <>
              <section className="mt-6 grid gap-3 sm:grid-cols-3">
                <div className="rounded-lg border border-border p-3">
                  <p className="text-small text-muted-foreground">Total signups</p>
                  <p className="text-h2 font-semibold">{summary?.totalSignups ?? 0}</p>
                </div>
                <div className="rounded-lg border border-border p-3">
                  <p className="text-small text-muted-foreground">Approved</p>
                  <p className="text-h2 font-semibold">{summary?.totalApproved ?? 0}</p>
                </div>
                <div className="rounded-lg border border-border p-3">
                  <p className="text-small text-muted-foreground">Clicks</p>
                  <p className="text-h2 font-semibold">{summary?.totalClicks ?? 0}</p>
                </div>
              </section>

              <section className="mt-8 rounded-xl border border-border p-4">
                <h2 className="text-h4 font-medium">Top Codes</h2>
                {summary && summary.topCodes.length > 0 ? (
                  <div className="mt-2 overflow-x-auto">
                    <table className="w-full border-collapse text-small">
                      <thead>
                        <tr className="border-b border-border text-left">
                          <th className="py-2 pr-4">Code</th>
                          <th className="py-2 pr-4">Approved</th>
                          <th className="py-2 pr-4">Pending</th>
                        </tr>
                      </thead>
                      <tbody>
                        {summary.topCodes.map((row) => (
                          <tr key={row.code} className="border-b border-border/60">
                            <td className="py-2 pr-4 font-mono">{row.code}</td>
                            <td className="py-2 pr-4">{row.approved}</td>
                            <td className="py-2 pr-4">{row.pending}</td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                ) : (
                  <p className="text-small text-muted-foreground">No redemptions yet.</p>
                )}
              </section>

              <section className="mt-8 rounded-xl border border-border p-4">
                <h2 className="text-h4 font-medium">Your latest code</h2>
                {stats?.myCode ? (
                  <code className="rounded-md border border-border bg-muted px-2 py-1 font-mono text-small">
                    {stats.myCode}
                  </code>
                ) : (
                  <p className="text-small text-muted-foreground">No active code. Generate one on the Referrals page.</p>
                )}
              </section>
            </>
          )}
        </div>
      </main>
    </>
  );
};

export default AdminPartnersPage;
--------------------------------------
File #13.: pages/admin/users.tsx
import React, { useEffect, useMemo, useState } from 'react';
import { supabaseBrowser } from '@/lib/supabaseBrowser';
import { RoleGuard } from '@/components/auth/RoleGuard';
import { Container } from '@/components/design-system/Container';
import { Card } from '@/components/design-system/Card';
import { Button } from '@/components/design-system/Button';
import { Badge } from '@/components/design-system/Badge';
import { Input } from '@/components/design-system/Input';
import { Modal } from '@/components/design-system/Modal';
import type { Profile } from '@/types/profile';

interface Row {
  id: string;
  full_name: string | null;
  email: string | null;
  role: Profile['role'];
  created_at: string | null;
  last_sign_in_at: string | null;
}

const ROLES: Profile['role'][] = ['student','teacher','admin'];

function AdminUsers() {
  const [loading, setLoading] = useState(true);
  const [changingId, setChangingId] = useState<string | null>(null);
  const [rows, setRows] = useState<Row[]>([]);
  const [q, setQ] = useState('');
  const [pinEmail, setPinEmail] = useState<string | null>(null);
  const [pin, setPin] = useState('');
  const [pinBusy, setPinBusy] = useState(false);
  const [pinMsg, setPinMsg] = useState<string | null>(null);

  const fetchUsers = async () => {
    setLoading(true);
    try {
      const { data } = await supabaseBrowser.auth.getSession();
      const tok = data?.session?.access_token;
      if (!tok) throw new Error('No session');
      const r = await fetch('/api/admin/users/list', {
        headers: { Authorization: `Bearer ${tok}` },
      });
      const j = await r.json();
      if (!r.ok) throw new Error(j?.error || 'Failed');
      setRows(j as Row[]);
    } catch (e) {
      console.error(e);
      setRows([]);
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  const filtered = useMemo(() => {
    const needle = q.trim().toLowerCase();
    if (!needle) return rows;
    return rows.filter(r =>
      (r.full_name ?? '').toLowerCase().includes(needle) ||
      (r.email ?? '').toLowerCase().includes(needle) ||
      r.id.toLowerCase().includes(needle) ||
      r.role.toLowerCase().includes(needle)
    );
  }, [rows, q]);

  const changeRole = async (id: string, newRole: Profile['role']) => {
    try {
      setChangingId(id);
      const { error } = await supabaseBrowser.rpc('admin_set_role', {
        target: id,
        new_role: newRole,
      });
      if (error) throw error;
      // Optimistic update
      setRows(prev => prev.map(p => (p.id === id ? { ...p, role: newRole } : p)));
    } catch (e) {
      console.error(e);
      alert('Failed to change role. Ensure you are admin and RPC/RLS are set.');
    } finally {
      setChangingId(null);
    }
  };

  const openPin = (email: string | null) => {
    setPinEmail(email);
    setPin('');
    setPinMsg(null);
  };

  const closePin = () => {
    setPinEmail(null);
    setPin('');
    setPinMsg(null);
  };

  const generatePin = async () => {
    setPinBusy(true);
    setPinMsg(null);
    try {
      const { data } = await supabaseBrowser.auth.getSession();
      const tok = data?.session?.access_token;
      if (!tok) throw new Error('No session');
      const r = await fetch('/api/admin/premium/generate-pin', {
        headers: { Authorization: `Bearer ${tok}` },
      });
      const j = await r.json();
      if (!r.ok || !j?.pin) throw new Error(j?.error || 'Failed');
      setPin(j.pin);
    } catch (e: any) {
      setPinMsg(e?.message || 'Error generating PIN');
    } finally {
      setPinBusy(false);
    }
  };

  const callPinApi = async (path: string, body: any) => {
    if (!pinEmail) return;
    setPinBusy(true);
    setPinMsg(null);
    try {
      const { data } = await supabaseBrowser.auth.getSession();
      const tok = data?.session?.access_token;
      if (!tok) {
        setPinMsg('No session');
        return;
      }
      const r = await fetch(path, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${tok}`,
        },
        body: JSON.stringify(body),
      });
      const j = await r.json();
      if (j?.ok) setPinMsg('Success');
      else setPinMsg(j?.error || j?.reason || 'Failed');
    } catch (e: any) {
      setPinMsg(e?.message || 'Error');
    } finally {
      setPinBusy(false);
    }
  };

  const savePin = () => callPinApi('/api/admin/premium/set-pin', { email: pinEmail, newPin: pin });
  const clearPin = () => callPinApi('/api/admin/premium/clear-pin', { email: pinEmail });

  return (
    <section className="py-24 bg-lightBg dark:bg-gradient-to-br dark:from-dark/80 dark:to-darker/90">
      <Container>
        <div className="mb-8">
          <h1 className="font-slab text-display mb-2 text-gradient-primary">Users</h1>
          <p className="text-grayish">View all users and set roles.</p>
        </div>

        <Card className="p-6 rounded-ds-2xl mb-6">
          <div className="flex flex-col md:flex-row gap-4 md:items-center md:justify-between">
            <div className="flex items-center gap-3">
              <Badge variant="info">{rows.length} total</Badge>
              <Badge variant="secondary">{filtered.length} shown</Badge>
            </div>
            <div className="flex gap-3">
              <Input
                value={q}
                onChange={e => setQ(e.target.value)}
                placeholder="Search by name, email, id, or role"
              />
              <Button onClick={fetchUsers} variant="secondary">Refresh</Button>
            </div>
          </div>
        </Card>

        <Card className="p-0 overflow-hidden rounded-ds-2xl">
          <div className="w-full overflow-x-auto">
            <table className="min-w-full text-left">
              <thead>
                <tr className="border-b border-black/5 dark:border-white/10">
                  <th className="px-5 py-3 text-caption uppercase tracking-wider">Name</th>
                  <th className="px-5 py-3 text-caption uppercase tracking-wider">Email</th>
                  <th className="px-5 py-3 text-caption uppercase tracking-wider">User ID</th>
                  <th className="px-5 py-3 text-caption uppercase tracking-wider">Role</th>
                  <th className="px-5 py-3 text-caption uppercase tracking-wider">Last Login</th>
                  <th className="px-5 py-3 text-caption uppercase tracking-wider">Account Created</th>
                  <th className="px-5 py-3 text-caption uppercase tracking-wider">Premium PIN</th>
                  <th className="px-5 py-3 text-caption uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody>
                {loading ? (
                  <tr>
                    <td className="px-5 py-4" colSpan={8}>
                      <div className="animate-pulse h-5 w-40 bg-gray-200 dark:bg-white/10 rounded" />
                    </td>
                  </tr>
                ) : filtered.length === 0 ? (
                  <tr>
                    <td className="px-5 py-6 text-grayish" colSpan={8}>No users found.</td>
                  </tr>
                ) : (
                  filtered.map(u => (
                    <tr key={u.id} className="border-t border-black/5 dark:border-white/10">
                      <td className="px-5 py-4 font-medium">{u.full_name ?? '–'}</td>
                      <td className="px-5 py-4 text-small text-grayish">{u.email ?? '–'}</td>
                      <td className="px-5 py-4 text-small text-grayish">{u.id}</td>
                      <td className="px-5 py-4">
                        <Badge variant={u.role === 'admin' ? 'warning' : u.role === 'teacher' ? 'info' : 'secondary'}>
                          {u.role}
                        </Badge>
                      </td>
                      <td className="px-5 py-4 text-small text-grayish">
                        {u.last_sign_in_at ? new Date(u.last_sign_in_at).toLocaleString() : '–'}
                      </td>
                      <td className="px-5 py-4 text-small text-grayish">
                        {u.created_at ? new Date(u.created_at).toLocaleString() : '–'}
                      </td>
                      <td className="px-5 py-4">
                        <Button
                          variant="secondary"
                          onClick={() => openPin(u.email ?? null)}
                          disabled={!u.email}
                        >
                          Manage
                        </Button>
                      </td>
                      <td className="px-5 py-4">
                        <div className="flex items-center gap-2">
                          <select
                            className="px-3 py-2 rounded-ds border border-black/10 dark:border-white/10 bg-white dark:bg-dark"
                            value={u.role}
                            onChange={e => changeRole(u.id, e.target.value as Profile['role'])}
                            disabled={changingId === u.id}
                          >
                            {ROLES.map(r => (
                              <option key={r} value={r}>{r}</option>
                            ))}
                          </select>
                          <Button
                            onClick={() => fetchUsers()}
                            variant="ghost"
                            disabled={changingId === u.id}
                          >
                            Reload
                          </Button>
                        </div>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </Card>
        <Modal
          open={!!pinEmail}
          onClose={closePin}
          title="Manage Premium PIN"
          footer={
            <div className="flex justify-between items-center gap-2">
              <Button variant="ghost" onClick={clearPin} disabled={pinBusy}>Clear PIN</Button>
              <div className="flex gap-2">
                <Button variant="secondary" onClick={generatePin} disabled={pinBusy}>Generate</Button>
                <Button onClick={savePin} disabled={!/^\d{4,6}$/.test(pin) || pinBusy} loading={pinBusy}>Save</Button>
              </div>
            </div>
          }
        >
          <Input
            label="New PIN"
            value={pin}
            onChange={e => setPin(e.target.value.replace(/\D/g, '').slice(0, 6))}
            inputMode="numeric"
            type="password"
            placeholder="4-6 digits"
          />
          {pinMsg && <p className="mt-2 text-small">{pinMsg}</p>}
        </Modal>
      </Container>
    </section>
  );
}

export default function AdminUsersPage() {
  return (
    <RoleGuard allow="admin">
      <AdminUsers />
    </RoleGuard>
  );
}
--------------------------------------
File #14.: pages/admin/stop-impersonation.tsx
// pages/admin/stop-impersonation.tsx
import { useEffect } from 'react';
import Head from 'next/head';
import { supabaseBrowser } from '@/lib/supabaseBrowser';

export default function StopImpersonation() {
  useEffect(() => {
    (async () => {
      try {
        localStorage.removeItem('impersonating');
        localStorage.removeItem('impUserId');
        localStorage.removeItem('impStartedAt');
        await supabaseBrowser.auth.signOut();
      } finally {
        window.location.replace('/admin');
      }
    })();
  }, []);

  return (
    <>
      <Head><title>Returning…</title></Head>
      <div className="min-h-[100dvh] grid place-items-center">
        <div className="animate-pulse text-small opacity-70">Signing out and returning to Admin…</div>
      </div>
    </>
  );
}
--------------------------------------
File #15.: pages/admin/premium/pin.tsx
// pages/admin/premium/pin.tsx
import React, { useState } from 'react';
import { supabaseBrowser } from '@/lib/supabaseBrowser';

export default function AdminPremiumPin() {
  const [email, setEmail] = useState('');
  const [pin, setPin] = useState('');
  const [busy, setBusy] = useState(false);
  const [msg, setMsg] = useState<string | null>(null);

  const call = async (path: string, body: any) => {
    setBusy(true); setMsg(null);
    try {
      const { data } = await supabaseBrowser.auth.getSession();
      const tok = data?.session?.access_token;
      if (!tok) { setMsg('Not logged in.'); return; }

      const r = await fetch(path, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json', Authorization: `Bearer ${tok}` },
        body: JSON.stringify(body),
      });
      const j = await r.json();
      if (j?.ok) setMsg('Success ✅');
      else setMsg(j?.error || j?.reason || 'Failed');
    } catch (e: any) {
      setMsg(e?.message || 'Error');
    } finally {
      setBusy(false);
    }
  };

  return (
    <main className="pr-min-h-[100dvh] pr-flex pr-items-center pr-justify-center pr-bg-gradient-to-b pr-from-black pr-to-neutral-900 pr-text-white pr-p-4">
      <div className="pr-w-full pr-max-w-md pr-space-y-4 pr-rounded-xl pr-border pr-border-white/10 pr-bg-white/5 pr-backdrop-blur pr-p-6">
        <h1 className="pr-text-h3 pr-font-semibold">Admin · Premium PIN</h1>

        <label className="pr-block pr-text-small pr-text-white/80">User Email</label>
        <input
          className="pr-w-full pr-rounded-lg pr-bg-white/10 pr-border pr-border-white/20 pr-py-2 pr-px-3"
          placeholder="user@example.com"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />

        <label className="pr-block pr-text-small pr-text-white/80">New PIN (4–6 digits)</label>
        <input
          className="pr-w-full pr-rounded-lg pr-bg-white/10 pr-border pr-border-white/20 pr-py-2 pr-px-3"
          type="password"
          inputMode="numeric"
          pattern="[0-9]*"
          placeholder="•••••"
          value={pin}
          onChange={(e) => setPin(e.target.value.replace(/\D/g, '').slice(0, 6))}
        />

        <div className="pr-flex pr-gap-3">
          <button
            disabled={busy}
            onClick={() => call('/api/admin/premium/set-pin', { email, newPin: pin })}
            className="pr-flex-1 pr-rounded-lg pr-bg-success hover:pr-bg-success pr-py-2 pr-font-medium disabled:pr-opacity-60"
          >
            Set / Update
          </button>
          <button
            disabled={busy}
            onClick={() => call('/api/admin/premium/clear-pin', { email })}
            className="pr-flex-1 pr-rounded-lg pr-bg-rose-500 hover:pr-bg-rose-600 pr-py-2 pr-font-medium disabled:pr-opacity-60"
          >
            Clear
          </button>
        </div>

        {msg && <div className="pr-text-small">{msg}</div>}

        <p className="pr-text-caption pr-text-white/60">
          Access enforced server-side. Only emails in <code>ADMIN_EMAILS</code> can use these APIs.
        </p>
      </div>
    </main>
  );
}
--------------------------------------
File #16.: pages/admin/reviews/index.tsx
// pages/admin/reviews/index.tsx
import Head from 'next/head';
import Link from 'next/link';
import { useEffect, useMemo, useState } from 'react';
import { useRouter } from 'next/router';

import { Container } from '@/components/design-system/Container';
import { Card } from '@/components/design-system/Card';
import { Button } from '@/components/design-system/Button';
import { Badge } from '@/components/design-system/Badge';
import { Alert } from '@/components/design-system/Alert';
import { supabaseBrowser } from '@/lib/supabaseBrowser';

type Role = 'student' | 'teacher' | 'admin';
type ModuleKind = 'speaking' | 'writing';

type AttemptRow = {
  id: string;
  user_name: string;
  user_email?: string;
  cohort?: string | null;
  module: ModuleKind;
  task: string; // e.g., "Task 2" or "Part 2"
  ai_band: number; // 0–9
  status: 'awaiting_review' | 'finalized' | 'in_progress';
  overridden?: boolean;
  created_at: string;     // ISO
  last_activity: string;  // ISO
};

type ApiResponse =
  | { ok: true; data: AttemptRow[] }
  | { ok: false; error: string };

const STATUS_BADGE: Record<AttemptRow['status'], { label: string; variant: 'warning' | 'info' | 'success' }> = {
  awaiting_review: { label: 'Awaiting Review', variant: 'warning' },
  in_progress: { label: 'In Progress', variant: 'info' },
  finalized: { label: 'Finalized', variant: 'success' },
};

export default function AdminReviewsIndex() {
  const router = useRouter();
  const [roleOk, setRoleOk] = useState<boolean | null>(null);

  // Filters
  const [q, setQ] = useState('');
  const [moduleFilter, setModuleFilter] = useState<'all' | ModuleKind>('all');
  const [windowFilter, setWindowFilter] = useState<'7d' | '30d' | 'all'>('7d');
  const [cohortFilter, setCohortFilter] = useState<string>('all');

  // Data
  const [rows, setRows] = useState<AttemptRow[]>([]);
  const [loading, setLoading] = useState(true);
  const [apiError, setApiError] = useState<string | null>(null);

  // ------ Guard: teacher/admin only ------
  useEffect(() => {
    (async () => {
      const { data: { user } } = await supabaseBrowser.auth.getUser();
      const role: Role | undefined =
        (user?.user_metadata?.role as Role | undefined) ||
        (user?.app_metadata?.role as Role | undefined);
      const allowed = role === 'teacher' || role === 'admin';
      setRoleOk(allowed);
      if (!allowed) {
        // Optional: redirect non‑authorized users
        // router.replace('/'); // keep commented if you prefer to show a friendly message instead
      }
    })();
  }, [router]);

  // ------ Fetch list ------
  useEffect(() => {
    (async () => {
      setLoading(true);
      setApiError(null);
      try {
        const res = await fetch('/api/admin/reviews');
        if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
        const json: ApiResponse = await res.json();
        if (!json.ok) throw new Error(json.error);
        setRows(json.data);
      } catch (e: unknown) {
        setApiError(e instanceof Error ? e.message : 'Failed to load reviews.');
        setRows([]);
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  // ------ Derived filters ------
  const cohorts = useMemo(() => {
    const set = new Set<string>();
    rows.forEach(r => { if (r.cohort) set.add(r.cohort); });
    return ['all', ...Array.from(set).sort()];
  }, [rows]);

  const filtered = useMemo(() => {
    const now = Date.now();
    const msWindow = windowFilter === '7d' ? 7 : windowFilter === '30d' ? 30 : 3650; // ~10y for "all"
    const cutoff = now - msWindow * 24 * 60 * 60 * 1000;

    return rows.filter(r => {
      if (moduleFilter !== 'all' && r.module !== moduleFilter) return false;
      if (cohortFilter !== 'all' && r.cohort !== cohortFilter) return false;
      if (windowFilter !== 'all' && new Date(r.last_activity).getTime() < cutoff) return false;
      if (q.trim()) {
        const needle = q.trim().toLowerCase();
        const hay = `${r.user_name} ${r.user_email ?? ''} ${r.task}`.toLowerCase();
        if (!hay.includes(needle)) return false;
      }
      return true;
    });
  }, [rows, moduleFilter, cohortFilter, windowFilter, q]);

  // ------ UI ------
  return (
    <>
      <Head><title>Admin • Reviews | GramorX</title></Head>

      <section className="py-24 bg-lightBg dark:bg-gradient-to-br dark:from-dark/80 dark:to-darker/90">
        <Container>
          <div className="mb-6">
            <h1 className="font-slab text-display text-gradient-primary">Teacher Reviews</h1>
            <p className="text-grayish max-w-2xl">
              Moderate <span className="font-semibold">Writing & Speaking</span> attempts — adjust AI bands with a reason,
              and keep an audit trail. {/* matches Phase‑1 priority */}
            </p>
          </div>

          {roleOk === false && (
            <Alert variant="warning" title="Access denied" className="mb-6">
              You need a <b>teacher</b> or <b>admin</b> role to open this page.
            </Alert>
          )}

          {apiError && (
            <Alert variant="warning" title="Data source missing" className="mb-6">
              Couldn’t load <code>/api/admin/reviews</code>. Create an API that returns an array of attempts with:
              <code className="ml-2">[{`{ id, user_name, user_email?, cohort?, module, task, ai_band, status, overridden?, created_at, last_activity }`}]</code>.
              You can wire it to a Supabase view/RPC with RLS for teacher/admin.
            </Alert>
          )}

          <Card className="p-6 rounded-ds-2xl">
            {/* Filters */}
            <div className="grid gap-3 md:grid-cols-4">
              <div>
                <label className="block text-small text-grayish dark:text-grayish mb-1">Search</label>
                <input
                  value={q}
                  onChange={e => setQ(e.target.value)}
                  placeholder="Student, email, task…"
                  className="w-full rounded-ds border bg-white text-lightText placeholder-gray-500
                             focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background focus:border-primary
                             dark:bg-dark/50 dark:text-white dark:placeholder-white/40 dark:border-purpleVibe/30
                             dark:focus-visible:ring-electricBlue dark:focus:border-electricBlue py-2.5 px-3.5"
                />
              </div>

              <div>
                <label className="block text-small text-grayish dark:text-grayish mb-1">Module</label>
                <select
                  value={moduleFilter}
                  onChange={e => setModuleFilter(e.target.value as 'all' | ModuleKind)}
                  className="w-full rounded-ds border bg-white text-lightText
                             focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background focus:border-primary
                             dark:bg-dark/50 dark:text-white dark:border-purpleVibe/30 dark:focus-visible:ring-electricBlue dark:focus:border-electricBlue py-2.5 px-3.5"
                >
                  <option value="all">All</option>
                  <option value="writing">Writing</option>
                  <option value="speaking">Speaking</option>
                </select>
              </div>

              <div>
                <label className="block text-small text-grayish dark:text-grayish mb-1">Time window</label>
                <select
                  value={windowFilter}
                  onChange={e => setWindowFilter(e.target.value as '7d' | '30d' | 'all')}
                  className="w-full rounded-ds border bg-white text-lightText
                             focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background focus:border-primary
                             dark:bg-dark/50 dark:text-white dark:border-purpleVibe/30 dark:focus-visible:ring-electricBlue dark:focus:border-electricBlue py-2.5 px-3.5"
                >
                  <option value="7d">Last 7 days</option>
                  <option value="30d">Last 30 days</option>
                  <option value="all">All time</option>
                </select>
              </div>

              <div>
                <label className="block text-small text-grayish dark:text-grayish mb-1">Cohort</label>
                <select
                  value={cohortFilter}
                  onChange={e => setCohortFilter(e.target.value)}
                  className="w-full rounded-ds border bg-white text-lightText
                             focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background focus:border-primary
                             dark:bg-dark/50 dark:text-white dark:border-purpleVibe/30 dark:focus-visible:ring-electricBlue dark:focus:border-electricBlue py-2.5 px-3.5"
                >
                  {cohorts.map(c => <option key={c} value={c}>{c === 'all' ? 'All cohorts' : c}</option>)}
                </select>
              </div>
            </div>

            {/* Table */}
            <div className="mt-6 overflow-x-auto">
              <table className="w-full border-collapse">
                <thead>
                  <tr className="text-left text-grayish">
                    <th className="py-2.5 pr-3">Student</th>
                    <th className="py-2.5 pr-3">Module</th>
                    <th className="py-2.5 pr-3">Task</th>
                    <th className="py-2.5 pr-3">AI Band</th>
                    <th className="py-2.5 pr-3">Status</th>
                    <th className="py-2.5 pr-3">Updated</th>
                    <th className="py-2.5 pr-3">Action</th>
                  </tr>
                </thead>
                <tbody>
                  {loading ? (
                    Array.from({ length: 6 }).map((_, i) => (
                      <tr key={`skeleton-${i}`} className="border-t border-lightBorder/40 dark:border-white/10">
                        <td colSpan={7} className="py-3">
                          <div className="animate-pulse h-5 w-full bg-gray-200 dark:bg-white/10 rounded" />
                        </td>
                      </tr>
                    ))
                  ) : filtered.length === 0 ? (
                    <tr className="border-t border-lightBorder/40 dark:border-white/10">
                      <td colSpan={7} className="py-6 text-grayish">No attempts found for the selected filters.</td>
                    </tr>
                  ) : (
                    filtered.map(row => {
                      const badge = STATUS_BADGE[row.status];
                      const updated = new Date(row.last_activity).toLocaleString();
                      return (
                        <tr key={row.id} className="border-t border-lightBorder/40 dark:border-white/10 hover:bg-purpleVibe/5 dark:hover:bg-white/5">
                          <td className="py-3 pr-3">
                            <div className="font-medium">{row.user_name}</div>
                            <div className="text-small opacity-80">{row.user_email ?? '—'}</div>
                          </td>
                          <td className="py-3 pr-3 capitalize">{row.module}</td>
                          <td className="py-3 pr-3">{row.task}</td>
                          <td className="py-3 pr-3">
                            <span className="font-semibold">{row.ai_band.toFixed(1)}</span>
                            {row.overridden && (
                              <Badge variant="warning" size="sm" className="ml-2">Overridden</Badge>
                            )}
                          </td>
                          <td className="py-3 pr-3">
                            <Badge variant={badge.variant} size="sm">{badge.label}</Badge>
                          </td>
                          <td className="py-3 pr-3 whitespace-nowrap">{updated}</td>
                          <td className="py-3 pr-3">
                            <Link href={`/admin/reviews/${row.id}`} legacyBehavior>
                              <Button as="a" variant="primary" className="rounded-ds">Open</Button>
                            </Link>
                          </td>
                        </tr>
                      );
                    })
                  )}
                </tbody>
              </table>
            </div>
          </Card>
        </Container>
      </section>
    </>
  );
}
--------------------------------------
File #17.: pages/admin/reviews/[attemptId].tsx
import Head from 'next/head';
import Link from 'next/link';
import { useEffect, useMemo, useState } from 'react';
import { useRouter } from 'next/router';

import { Container } from '@/components/design-system/Container';
import { Card } from '@/components/design-system/Card';
import { Button } from '@/components/design-system/Button';
import { Badge } from '@/components/design-system/Badge';
import { Alert } from '@/components/design-system/Alert';
import { supabaseBrowser } from '@/lib/supabaseBrowser';

type Role = 'student'|'teacher'|'admin';
type ModuleKind = 'speaking'|'writing';

type AttemptDetail = {
  id: string;
  user_name: string;
  user_email?: string;
  cohort?: string | null;
  module: ModuleKind;
  task: string;            // e.g., "Task 2" or "Part 2"
  ai_band: number;         // 0–9
  ai_rubric?: {
    task_response?: string;
    coherence?: string;
    lexical?: string;
    grammar?: string;
    pronunciation?: string;
  } | null;
  overridden?: boolean;
  final_band?: number | null;
  override_reason?: string | null;
  created_at: string;      // ISO
  last_activity: string;   // ISO
};

type ApiGet =
  | { ok: true; data: AttemptDetail }
  | { ok: false; error: string };

type ApiPost =
  | { ok: true; data: { final_band: number; reason: string } }
  | { ok: false; error: string };

export default function ReviewAttemptPage() {
  const router = useRouter();
  const { attemptId } = router.query as { attemptId?: string };

  const [roleOk, setRoleOk] = useState<boolean | null>(null);
  const [loading, setLoading] = useState(true);
  const [data, setData] = useState<AttemptDetail | null>(null);
  const [error, setError] = useState<string | null>(null);

  // form
  const [finalBand, setFinalBand] = useState<string>('');
  const [reason, setReason] = useState<string>('');
  const [submitting, setSubmitting] = useState(false);
  const [savedMsg, setSavedMsg] = useState<string | null>(null);

  // Guard (teacher/admin only)
  useEffect(() => {
    (async () => {
      const { data: { user } } = await supabaseBrowser.auth.getUser();
      const role: Role | undefined =
        (user?.user_metadata?.role as Role | undefined) ||
        (user?.app_metadata?.role as Role | undefined);
      const allowed = role === 'teacher' || role === 'admin';
      setRoleOk(allowed);
      if (!allowed) return;
    })();
  }, []);

  // Load attempt
  useEffect(() => {
    if (!attemptId) return;
    (async () => {
      setLoading(true);
      setError(null);
      try {
        const res = await fetch(`/api/admin/reviews?attemptId=${encodeURIComponent(attemptId)}`);
        if (!res.ok) throw new Error(`${res.status} ${res.statusText}`);
        const json: ApiGet = await res.json();
        if (!json.ok) throw new Error(json.error);
        setData(json.data);
        setFinalBand(json.data.final_band?.toString() ?? '');
        setReason(json.data.override_reason ?? '');
      } catch (e: unknown) {
        setError(e instanceof Error ? e.message : 'Failed to load attempt.');
      } finally {
        setLoading(false);
      }
    })();
  }, [attemptId]);

  const updatedAt = useMemo(
    () => (data ? new Date(data.last_activity).toLocaleString() : ''),
    [data]
  );

  async function submitOverride(e: React.FormEvent) {
    e.preventDefault();
    if (!attemptId) return;
    const band = Number(finalBand);
    if (Number.isNaN(band) || band < 0 || band > 9) {
      setSavedMsg(null);
      setError('Final band must be a number between 0 and 9.');
      return;
    }
    if (!reason.trim()) {
      setSavedMsg(null);
      setError('Please provide a brief reason for the override.');
      return;
    }
    setSubmitting(true);
    setError(null);
    setSavedMsg(null);
    try {
      const res = await fetch(`/api/admin/reviews/override`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ attemptId, final_band: band, reason }),
      });
      const json: ApiPost = await res.json();
      if (!res.ok || !json.ok) throw new Error(json.ok ? 'Failed to save' : json.error);
      setSavedMsg('Override saved.');
      // reflect in UI
      setData(prev => prev ? { ...prev, overridden: true, final_band: band, override_reason: reason } : prev);
    } catch (e: unknown) {
      setError(e instanceof Error ? e.message : 'Failed to save override.');
    } finally {
      setSubmitting(false);
    }
  }

  return (
    <>
      <Head><title>Admin • Review Attempt | GramorX</title></Head>

      <section className="py-24 bg-lightBg dark:bg-gradient-to-br dark:from-dark/80 dark:to-darker/90">
        <Container>
          <div className="mb-6 flex items-center justify-between gap-3">
            <div>
              <h1 className="font-slab text-display text-gradient-primary">Review & Override</h1>
              <p className="text-grayish max-w-2xl">Adjust AI score with a reason and keep the audit trail.</p>
            </div>
            <div className="shrink-0">
              <Link href="/admin/reviews" legacyBehavior>
                <Button as="a" variant="secondary" className="rounded-ds">Back to list</Button>
              </Link>
            </div>
          </div>

          {roleOk === false && (
            <Alert variant="warning" title="Access denied" className="mb-6">
              You need a <b>teacher</b> or <b>admin</b> role to open this page.
            </Alert>
          )}

          {error && (
            <Alert variant="warning" title="Heads up" className="mb-6">{error}</Alert>
          )}

          <div className="grid gap-6 md:grid-cols-3">
            {/* Left: Attempt summary */}
            <Card className="p-6 md:col-span-2 rounded-ds-2xl">
              {loading ? (
                <div className="animate-pulse h-5 w-full bg-gray-200 dark:bg-white/10 rounded" />
              ) : !data ? (
                <div className="text-grayish">No data.</div>
              ) : (
                <>
                  <div className="flex flex-wrap items-center gap-3 justify-between">
                    <div>
                      <div className="text-small opacity-80">Student</div>
                      <div className="font-semibold">{data.user_name}</div>
                      <div className="text-small opacity-80">{data.user_email ?? '—'}</div>
                    </div>
                    <div className="text-right">
                      <div className="text-small opacity-80">Updated</div>
                      <div className="font-medium">{updatedAt}</div>
                    </div>
                  </div>

                  <div className="mt-5 grid gap-4 sm:grid-cols-3">
                    <div className="p-3.5 rounded-ds border border-lightBorder dark:border-white/10">
                      <div className="text-small opacity-80">Module</div>
                      <div className="capitalize font-medium">{data.module}</div>
                    </div>
                    <div className="p-3.5 rounded-ds border border-lightBorder dark:border-white/10">
                      <div className="text-small opacity-80">Task</div>
                      <div className="font-medium">{data.task}</div>
                    </div>
                    <div className="p-3.5 rounded-ds border border-lightBorder dark:border-white/10">
                      <div className="text-small opacity-80">AI band</div>
                      <div className="font-semibold">{data.ai_band.toFixed(1)}</div>
                    </div>
                  </div>

                  {data.overridden && (
                    <div className="mt-4">
                      <Badge variant="warning" size="sm">Overridden</Badge>
                    </div>
                  )}

                  {/* Simple rubric readout */}
                  {data.ai_rubric && (
                    <div className="mt-6">
                      <h3 className="font-semibold mb-2">AI Rubric Notes</h3>
                      <ul className="list-disc pl-5 space-y-1 text-body opacity-90">
                        {data.ai_rubric.task_response && <li><b>Task response:</b> {data.ai_rubric.task_response}</li>}
                        {data.ai_rubric.coherence && <li><b>Coherence:</b> {data.ai_rubric.coherence}</li>}
                        {data.ai_rubric.lexical && <li><b>Lexical:</b> {data.ai_rubric.lexical}</li>}
                        {data.ai_rubric.grammar && <li><b>Grammar:</b> {data.ai_rubric.grammar}</li>}
                        {data.ai_rubric.pronunciation && <li><b>Pronunciation:</b> {data.ai_rubric.pronunciation}</li>}
                      </ul>
                    </div>
                  )}
                </>
              )}
            </Card>

            {/* Right: Override form */}
            <Card className="p-6 rounded-ds-2xl">
              <h3 className="font-semibold mb-3">Set final band</h3>
              <form onSubmit={submitOverride} className="space-y-4">
                <label className="block">
                  <span className="mb-1.5 inline-block text-small text-grayish dark:text-grayish">Final band (0–9)</span>
                  <input
                    inputMode="decimal"
                    value={finalBand}
                    onChange={e => setFinalBand(e.target.value)}
                    placeholder="e.g., 6.5"
                    className="w-full rounded-ds border bg-white text-lightText placeholder-gray-500
                               focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background focus:border-primary
                               dark:bg-dark/50 dark:text-white dark:placeholder-white/40 dark:border-purpleVibe/30
                               dark:focus-visible:ring-electricBlue dark:focus:border-electricBlue py-2.5 px-3.5"
                  />
                </label>

                <label className="block">
                  <span className="mb-1.5 inline-block text-small text-grayish dark:text-grayish">Reason (required)</span>
                  <textarea
                    rows={5}
                    value={reason}
                    onChange={e => setReason(e.target.value)}
                    placeholder="Explain why you adjusted the band (task achievement, coherence, pronunciation, etc.)"
                    className="w-full rounded-ds border bg-white text-lightText placeholder-gray-500
                               focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background focus:border-primary
                               dark:bg-dark/50 dark:text-white dark:placeholder-white/40 dark:border-purpleVibe/30
                               dark:focus-visible:ring-electricBlue dark:focus:border-electricBlue py-2.5 px-3.5"
                  />
                </label>

                <div className="flex gap-3">
                  <Button type="submit" variant="primary" disabled={submitting} className="rounded-ds">
                    {submitting ? 'Saving…' : 'Save override'}
                  </Button>
                  {!!data?.final_band && (
                    <span className="self-center text-small opacity-80">
                      Current final: <b>{data.final_band.toFixed(1)}</b>
                    </span>
                  )}
                </div>
              </form>

              {savedMsg && <Alert variant="success" title={savedMsg} className="mt-4" />}
              {!savedMsg && !error && (
                <Alert variant="info" className="mt-4">
                  The AI band is preserved for audit. Your override becomes the <b>final</b> band.
                </Alert>
              )}
            </Card>
          </div>
        </Container>
      </section>
    </>
  );
}
--------------------------------------
