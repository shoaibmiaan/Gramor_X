import React from 'react';
import { Card } from '@/components/design-system/Card';
import { Badge } from '@/components/design-system/Badge';
import { Button } from '@/components/design-system/Button';

/**
 * A record returned from the re‑evaluation API.  Each row contains the
 * scores assigned by the AI, the marking mode, optional focus points and
 * optional feedback generated by the model.  The `created_at` timestamp
 * allows clients to sort or display when the re‑evaluation was performed.
 */
export type ReevalRow = {
  id: string;
  created_at: string;
  /** One of the supported marking modes or a custom value. */
  mode: string;
  /** List of focus criteria chosen by the user during re‑evaluation. */
  focus: string[];
  /** Overall band score returned by the AI. */
  band_overall: number;
  /** Breakdown of scores across the four IELTS writing criteria. */
  band_breakdown: {
    task: number;
    coherence: number;
    lexical: number;
    grammar: number;
  };
  /** Optional free‑form feedback from the AI. */
  feedback?: string | null;
  /** Model identifier used for scoring; may be displayed or logged. */
  model?: string | null;
};

export interface ReevalHistoryProps {
  /** The original band score for comparison; used to determine delta styling. */
  originalOverall: number;
  /** List of re‑evaluation rows to render. */
  items: ReevalRow[];
  /** Whether the current user has permission to restore a past score. */
  canRestore?: boolean;
  /** Handler invoked when the restore button is pressed. */
  onRestore?: (row: ReevalRow) => void;
}

/**
 * Render a history list of prior re‑evaluations.  Each entry displays the
 * band score, timestamp, mode and focus, along with an optional restore
 * button for privileged users.  Feedback from the AI is shown beneath the
 * header if present.  When no history exists the component renders a
 * simple placeholder message.
 */
export const ReevalHistory: React.FC<ReevalHistoryProps> = ({
  originalOverall,
  items,
  canRestore = false,
  onRestore,
}) => {
  if (!items || items.length === 0) {
    return (
      <Card className="card-surface p-6 rounded-ds-2xl">
        <p className="text-muted-foreground">No re‑evaluations yet.</p>
      </Card>
    );
  }

  return (
    <Card className="card-surface p-6 rounded-ds-2xl">
      <h3 className="text-h3 mb-4">Re‑evaluation History</h3>
      <ul className="space-y-4">
        {items.map((item) => {
          // Determine whether the new score improved, worsened or matched the original.
          const delta = item.band_overall - originalOverall;
          const variant = delta > 0 ? 'success' : delta < 0 ? 'danger' : 'neutral';
          return (
            <li
              key={item.id}
              className="p-3.5 rounded-ds border border-gray-200 dark:border-white/10"
            >
              <div className="flex items-start justify-between gap-3">
                <div>
                  <div className="flex items-center gap-2">
                    <Badge variant={variant} size="sm">
                      {item.band_overall}
                    </Badge>
                    <span className="text-small opacity-80">
                      {new Date(item.created_at).toLocaleString()}
                    </span>
                  </div>
                  <div className="mt-0.5 text-small text-muted-foreground">
                    <span className="capitalize">Mode: {item.mode}</span>
                    {item.focus?.length ? (
                      <span>
                        {' '}· Focus: {item.focus.join(', ')}
                      </span>
                    ) : null}
                  </div>
                </div>
                {canRestore && onRestore && (
                  <Button
                    variant="secondary"
                    size="sm"
                    onClick={() => onRestore(item)}
                    className="shrink-0"
                  >
                    Restore
                  </Button>
                )}
              </div>
              {item.feedback ? (
                <p className="mt-2 text-small text-muted-foreground whitespace-pre-line">
                  {item.feedback}
                </p>
              ) : null}
            </li>
          );
        })}
      </ul>
    </Card>
  );
};

export default ReevalHistory;