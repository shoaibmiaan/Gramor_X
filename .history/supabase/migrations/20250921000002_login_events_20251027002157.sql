-- 20250921000002_login_events.sql
-- Login events table + RLS + idempotent policies

-- Table (idempotent)
create table if not exists public.login_events (
  id           bigint generated by default as identity primary key,
  user_id      uuid not null references auth.users(id) on delete cascade,
  event        text not null check (event in ('login','logout','mfa_challenge','password_reset')),
  success      boolean not null default true,
  ip_address   inet,
  user_agent   text,
  created_at   timestamptz not null default now()
);

-- RLS
alter table if exists public.login_events enable row level security;

-- Policies (idempotent)

-- Allow the user to view only their own login events
do $$
begin
  if not exists (
    select 1
    from pg_policies
    where schemaname = 'public'
      and tablename  = 'login_events'
      and policyname = 'Users view own login events'
  ) then
    create policy "Users view own login events"
      on public.login_events
      for select
      to authenticated
      using (auth.uid() = user_id);
  end if;
end$$;

-- Allow the user (or server on behalf of the user) to insert their own event rows
do $$
begin
  if not exists (
    select 1
    from pg_policies
    where schemaname = 'public'
      and tablename  = 'login_events'
      and policyname = 'Users insert own login events'
  ) then
    create policy "Users insert own login events"
      on public.login_events
      for insert
      to authenticated
      with check (auth.uid() = user_id);
  end if;
end$$;

-- Optional: admins can view all (idempotent)
do $$
begin
  if not exists (
    select 1
    from pg_policies
    where schemaname = 'public'
      and tablename  = 'login_events'
      and policyname = 'Admins view all login events'
  ) then
    create policy "Admins view all login events"
      on public.login_events
      for select
      to authenticated
      using ((auth.jwt() ->> 'role') = 'admin');
  end if;
end$$;

-- Optional index for common queries
create index if not exists login_events_user_created_idx
  on public.login_events (user_id, created_at desc);
