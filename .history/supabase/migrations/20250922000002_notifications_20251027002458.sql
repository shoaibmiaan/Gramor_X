-- 20250922000002_notifications.sql
-- Notifications table + RLS + idempotent policies

-- Table (safe to re-run)
create table if not exists public.notifications (
  id           bigint generated by default as identity primary key,
  user_id      uuid not null references auth.users(id) on delete cascade,
  title        text,
  body         text,
  data         jsonb,
  is_read      boolean not null default false,
  created_at   timestamptz not null default now()
);

-- RLS
alter table if exists public.notifications enable row level security;

-- Users can manage ONLY their own notifications (idempotent)
do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname='public' and tablename='notifications'
      and policyname='Users manage own notifications'
  ) then
    create policy "Users manage own notifications"
      on public.notifications
      for all
      to authenticated
      using (auth.uid() = user_id)
      with check (auth.uid() = user_id);
  end if;
end$$;

-- Admins may view all notifications (idempotent)
do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname='public' and tablename='notifications'
      and policyname='Admins view all notifications'
  ) then
    create policy "Admins view all notifications"
      on public.notifications
      for select
      to authenticated
      using ((auth.jwt()->>'role') = 'admin');
  end if;
end$$;

-- Helpful index (safe to re-run)
create index if not exists notifications_user_created_idx
  on public.notifications (user_id, created_at desc);
