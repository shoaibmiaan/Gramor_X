-- 20250923000001_referrals.sql
-- Referral codes + safe RLS policies (idempotent)

-- Main table (kept minimal so it won't conflict with existing schema)
create table if not exists public.referral_codes (
  id         bigint generated by default as identity primary key,
  user_id    uuid not null references auth.users(id) on delete cascade,
  code       text not null,
  created_at timestamptz not null default now(),
  constraint referral_codes_code_unique unique (code)
);

-- RLS
alter table if exists public.referral_codes enable row level security;

-- Users can view ONLY their own referral code(s)
do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename  = 'referral_codes'
      and policyname = 'users can view own referral code'
  ) then
    create policy "users can view own referral code"
      on public.referral_codes
      for select
      to authenticated
      using (auth.uid() = user_id);
  end if;
end$$;

-- Users can insert ONLY their own referral code rows
do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename  = 'referral_codes'
      and policyname = 'users can insert own referral code'
  ) then
    create policy "users can insert own referral code"
      on public.referral_codes
      for insert
      to authenticated
      with check (auth.uid() = user_id);
  end if;
end$$;

-- Users can update ONLY their own referral code rows
do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename  = 'referral_codes'
      and policyname = 'users can update own referral code'
  ) then
    create policy "users can update own referral code"
      on public.referral_codes
      for update
      to authenticated
      using (auth.uid() = user_id)
      with check (auth.uid() = user_id);
  end if;
end$$;

-- Optional: admins can view all referral codes
do $$
begin
  if not exists (
    select 1 from pg_policies
    where schemaname = 'public'
      and tablename  = 'referral_codes'
      and policyname = 'admins can view all referral codes'
  ) then
    create policy "admins can view all referral codes"
      on public.referral_codes
      for select
      to authenticated
      using ((auth.jwt()->>'role') = 'admin');
  end if;
end$$;

-- Helpful index (safe to re-run)
create index if not exists referral_codes_user_created_idx
  on public.referral_codes (user_id, created_at desc);
