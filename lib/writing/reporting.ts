import PDFDocument from 'pdfkit';

export interface ReportAttemptSummary {
  topic: string;
  createdAt: string;
  band: number | null;
  delta?: number | null;
}

export interface ReportDrillSummary {
  total: number;
  tags: Record<string, number>;
}

export interface BandReportContext {
  userName: string;
  periodStart: string;
  periodEnd: string;
  averageBand: number | null;
  attempts: ReportAttemptSummary[];
  drills: ReportDrillSummary;
  readiness: { pass: boolean; missing: string[] };
}

function formatDate(value: string) {
  return new Intl.DateTimeFormat('en', { dateStyle: 'medium' }).format(new Date(value));
}

export function buildBandReportPdf(context: BandReportContext): Promise<Buffer> {
  return new Promise((resolve, reject) => {
    const doc = new PDFDocument({ margin: 48, size: 'A4' });
    const chunks: Buffer[] = [];
    doc.on('data', (chunk) => chunks.push(chunk as Buffer));
    doc.on('end', () => resolve(Buffer.concat(chunks)));
    doc.on('error', reject);

    doc.fontSize(18).text('GramorX Weekly Band Report', { align: 'center' });
    doc.moveDown(0.5);
    doc.fontSize(12).text(`Learner: ${context.userName}`);
    doc.text(`Period: ${formatDate(context.periodStart)} – ${formatDate(context.periodEnd)}`);
    doc.moveDown();

    const averageBand = context.averageBand ?? 0;
    doc.fontSize(14).text('Band trajectory', { underline: true });
    doc.fontSize(12).text(`Average band this period: ${averageBand.toFixed(1)}`);
    if (context.attempts.length > 1) {
      const first = context.attempts[context.attempts.length - 1].band ?? 0;
      const last = context.attempts[0].band ?? 0;
      const delta = last - first;
      doc.text(`Change vs. period start: ${delta >= 0 ? '+' : ''}${delta.toFixed(1)} band`);
    }
    doc.moveDown(0.5);

    doc.fontSize(14).text('Attempts reviewed', { underline: true });
    if (context.attempts.length === 0) {
      doc.fontSize(12).text('No scored attempts this period. Submit a draft to unlock AI feedback.');
    } else {
      context.attempts.forEach((attempt) => {
        doc.fontSize(12).text(`• ${formatDate(attempt.createdAt)} — ${attempt.topic}`);
        doc.text(`  Band ${attempt.band?.toFixed(1) ?? 'pending'}${typeof attempt.delta === 'number' ? ` (${attempt.delta >= 0 ? '+' : ''}${attempt.delta?.toFixed(1)} vs. previous)` : ''}`);
      });
    }
    doc.moveDown(0.5);

    doc.fontSize(14).text('Drill adherence', { underline: true });
    doc.fontSize(12).text(`Drills completed: ${context.drills.total}`);
    Object.entries(context.drills.tags).forEach(([tag, count]) => {
      doc.text(`• ${tag}: ${count}`);
    });
    doc.moveDown(0.5);

    doc.fontSize(14).text('Readiness gate', { underline: true });
    if (context.readiness.pass) {
      doc.fontSize(12).text('✅ Ready for a redraft. Schedule within the next 14 days.');
    } else {
      doc.fontSize(12).text('⚠️ Actions needed before redrafting:');
      context.readiness.missing.forEach((item) => doc.text(`• ${item}`));
    }

    doc.moveDown(1);
    doc.fontSize(10).fillColor('gray').text('Generated by GramorX Writing Studio', { align: 'center' });
    doc.end();
  });
}
